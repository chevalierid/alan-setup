* PSpice Model Editor - Version 17.4.0
* DAC80501
*****************************************************************************
* (C) Copyright 2020 Texas Instruments Incorporated. All rights reserved.
*****************************************************************************
** This model is designed as an aid for customers of Texas Instruments.
** TI and its licensors and suppliers make no warranties, either expressed
** or implied, with respect to this model, including the warranties of
** merchantability or fitness for a particular purpose.  The model is
** provided solely on an "as is" basis.  The entire risk as to its quality
** and performance is with the customer
*****************************************************************************
*
* This model is subject to change without notice. Texas Instruments
* Incorporated is not responsible for updating this model.
*
*****************************************************************************
*
** Released by: Texas Instruments Inc.
* Part: DAC80501
* Date: 13 Aug 2020
* Model Type: All in One
* Simulator: PSPICE
* Simulator Version: 17.4.0.p010
* EVM Order Number:
* EVM Users Guide:
* Datasheet: SBAS794C
*
*
* Model Version: Final 1.0

* Model Usage Notes:

* * The following features have been modeled
******** DAC Ladder *************************
*Noise (Both Broadband and 1/F Noise)
**** Reference  Block*************************
*Noise (both 1/f and Broadband Noise)
*Line & Load Regulation
*Short circuit current limit
*Output Impedance
*Temperature Drift
********Output Buffer Block:******************
*Voltage and Current noise (1/f and Broadband)
*Offset and temperature drift
*Open loop Gain
*Slew rate
*PSRR
*Gain Error , Headroom and Footroom
*Zero Code Error and Full Scale Error
*Gain Error Drift
*Output Impedance
*Output Current and Short Ciruit Current limits


*****************************************************************************
**
.SUBCKT DAC80501 VOUT DAC_REF VCC GND
+ B15 B14 B13 B12 B11 B10 B9 B8 B7 B6 B5 B4 B3 B2 B1 B0
.PARAM  vref=2 vos_typ=0.3m vos_tc=2 gain_err_fsr=-0.02 footroom=0.3m
+  buffer_gain=1 headroom=0.3m gain_err_tc_fsrppm=1 tnom=27
V_V8         N286842 GND 2.5Vdc
G_G2         GND DAC_LADDER_OUT_WINL DAC_ERROR_OUT GND 1
X_U102         GND N286494 dac_ladder_noise PARAMS:  NOISE_1F_NV_RTHZ=58
+  NOISE_1F_FREQ=100 NOISE_FLAT_NV_RTHZ=56
X_U108         DAC_REF 0 DAC_LADDER_OUT DAC_LSB VTRUE N286494 B23 B22 B21 B20
+  B19 B18 B17 B16 B15 B14 B13 B12 B11 B10 B9 B8 B7 B6 B5 B4 B3 B2 B1 B0
+  DAC_LADDER_N PARAMS:  N=16
V_V9         VTRUE GND 1Vdc
X_U107         DAC_ERROR_OUT GND VTRUE DAC_LSB B23 B22 B21 B20 B19 B18 B17 B16
+  B15 B14 B13 B12 B11 B10 B9 B8 B7 B6 B5 B4 B3 B2 B1 B0 DAC_INL_TABLE
G_G1         GND DAC_LADDER_OUT_WINL DAC_LADDER_OUT GND 1
E_E1         N286258 GND DAC_LADDER_OUT_WINL GND 1
R_R3         GND DAC_LADDER_OUT_WINL  1 TC=0,0
X_U101_U_ZOUT_U10         U101_U_ZOUT_PAIR2 GND U101_U_ZOUT_PAIR3 GND GND zp1
+  PARAMS:  GAIN=1 FZ=1e9 FP=1e12 R=1E6
X_U101_U_ZOUT_U8         U101_U_ZOUT_PAIR1 GND U101_U_ZOUT_PAIR2 GND GND pz1
+  PARAMS:  GAIN=1 FP=2.3e6 FZ=2.3e8 R=1e6
X_U101_U_ZOUT_U5         U101_VCLAMP_OUT U101_U_ZOUT_PAIR3
+  U101_U_ZOUT_ZOUT_DC_SUB_OUTA U101_ZOUT_OUT GND zout_dc_sub PARAMS:  ZOUT_DC=10
+  ZOUT_MAX=1e3
X_U101_U_ZOUT_U9         U101_U_ZOUT_ZOUT_DC_SUB_OUTA GND U101_U_ZOUT_PAIR1 GND
+  GND zp1 PARAMS:  GAIN=1 FZ=0.215 FP=30 R=1E6
X_U101_U3         VCC GND U101_GBW_SLEW_OUT U101_VCLAMP_OUT U101_VIMON GND
+  VCLAMP_W_CLAW PARAMS:  VMAXIO={HEADROOM} VMINIO={FOOTROOM} SLOPE=1
X_U101_U7         U101_VIP U101_VIM U101_GBW_SLEW_OUT VCC GND U101_N135783 GND
+  gbw_slew_en PARAMS:  AOL=140 GBW=2E6 SRP=2E6 SRN=2E6
X_U101_U5         VCC GND U101_FB U101_VIM GND PSRR PARAMS:  PSRR=75 FPSRR=1.6
X_U101_U8         U101_ICLAMP_OUT VOUT U101_VIMON AMETER PARAMS:  GAIN=1
E_U101_E4         U101_FB GND VOUT GND
+ {(1/(BUFFER_GAIN*(1+GAIN_ERR_FSR*VREF/100+(GAIN_ERR_TC_FSRppm*1e4)*
+ {TEMP-TNOM})))}
V_U101_VOS         U101_VNSE_OUT U101_VIP {VOS_TYP+VOS_TC*{TEMP-TNOM}}
X_U101_U2         U101_ZOUT_OUT U101_ICLAMP_OUT OUT_CURRENT_CLAMP PARAMS:
+  RSER=1 IMAX=30m IMIN=30m
X_U101_U6         N286264 U101_VNSE_OUT vnse PARAMS:  NLF_NV_RTHZ=58 FLW_HZ=100
+  NVR_NV_RTHZ=56
V_U101_V1         U101_N135783 GND 1Vdc
X_U5         OUT_REF N286842 VCC GND VOLTAGE_REF PARAMS:  REF_VIN_NOM_V=2.5
+  DRIFT_OUT_PPM=5 ILOAD_MA=5 ISC_MA=8 R_OUT_OHMS=0.1 LINE_REG_UVPV=20
R_R1         N286258 N286264  50 TC=0,0
R_R4         GND VOUT  100k TC=0,0
X_U2         OUT_REF DAC_REF voltage_ref_noise PARAMS:  NOISE_1F_NV_RTHZ=141
+  NOISE_1F_FREQ =10 NOISE_FLAT_NV_RTHZ=140
R_R5         0 B23  10k TC=0,0
R_R6         0 B22  10k TC=0,0
R_R7         0 B21  10k TC=0,0
R_R8         0 B20  10k TC=0,0
R_R9         0 B19  10k TC=0,0
R_R10         0 B18  10k TC=0,0
R_R11         0 B17  10k TC=0,0
R_R12         0 B16  10k TC=0,0
.ENDS
*$
**************
**          **
**          **
**************
.subckt dac_ladder_noise 1 2 params: noise_1f_nv_rthz = 100 noise_1f_freq = 150
+  noise_flat_nv_rthz = 94
.PARAM GLF={PWR(NOISE_1F_FREQ,0.25)*NOISE_1F_NV_RTHZ/1164}
.PARAM RNV={1.184*PWR(NOISE_FLAT_NV_RTHZ,2)}
.MODEL DVN D KF={PWR(NOISE_1F_FREQ,0.5)/1E11} IS=1.0E-16
* END CALC VALS
I1 0 7 10E-3
I2 0 8 10E-3
D1 7 0 DVN
D2 8 0 DVN
E1 3 6 7 8 {GLF}
R1 3 0 1E9
R2 3 0 1E9
R3 3 6 1E9
E2 6 4 5 0 10
R4 5 0 {RNV}
R5 5 0 {RNV}
R6 3 4 1E9
R7 4 0 1E9
E3 1 2 3 4 1
C1 1 0 1E-15
C2 2 0 1E-15
C3 1 2 1E-15
.ENDS
*$
**************
**          **
**          **
**************
.subckt zp1 vc+ vc- out+ out- 1
+ params:
+ gain = 1
+ fz = 1e3
+ fp = 1e4
+ r = 1e6
.param GG1 = {GAIN * FP/FZ}
.param cc1 = {1/(6.2831853 * fz * r)}
.param rr1 = {r/(fp/fz - 1)}
c1 vc+ 2 {cc1}
g1 out- out+ 2 1 {gg1}
r1 vc+ 2 r_noiseless {r}
r2 2 1 r_noiseless {rr1}
r3 out+ out- r_noiseless 1
.model r_noiseless res
+ t_abs=-273.15
.ends
*$
**************
**          **
**          **
**************
.subckt pz1 vc+ vc- out+ out- 1
+ params:
+ gain = 1
+ fp = 1e3
+ fz = 1e4
+ r = 1e6
.param CC1 = {1/(6.2831853 * FZ * R)}
.param rr1 = {(1/(6.2831853 * fp * cc1)) - r}
c1 2 1 {cc1}
g1 out- out+ 3 1 {gain}
r1 vc+ 3 r_noiseless {rr1}
r2 3 2 r_noiseless {r}
r3 out+ out- r_noiseless 1
.model r_noiseless res
+ t_abs=-273.15
.ends
*$
**************
**          **
**          **
**************
.subckt zout_dc_sub ina inb outa outb com
+ params:
+ zout_dc = 1
+ zout_max = 1e3
.param BETA = 1
.param rdummy = {10*zout_max}
.param rx = {100*zout_max}
.param g1 = {rx/(zout_dc*beta)}
g1 com outa ina outb {g1}
r1 outa com r_noiseless 1
rdummy outb com r_noiseless {rdummy}
rx inb outb r_noiseless {rx}
.model r_noiseless res
+ t_abs=-273.15
.ends
*$
**************
**          **
**          **
**************
.subckt gbw_slew_en  vip  vim  vo vcc vee en gndf params: aol = 140 gbw = 130e6
+  srp = {115e6} srn = {115e6}
.param it = 0.001
.param pi = 3.141592
.param ip = {it*max(1,srp/srn)}
.param in = {it*min(-1,-srn/srp)}
.param cc = {it*max(1/srp,1/srn)}
.param fp = {gbw/pwr(10,aol/20)}
.param rc = {1/(2*pi*cc*fp)}
.param gc = {pwr(10,aol/20)/rc}
g1 gndf outg1 value = {max(min(v(en,gndf)*gc*v(vip,vim),ip),in)}
rg1p outg1 gndf {rc}
cg1dp outg1 gndf {cc}
eout vo gndf outg1 gndf 1
s1 outg1 n1 outg1 n1 sw1
e1 n1 gndf value = {v(vcc,gndf)}
s2 outg1 n2 outg1 n2  sw2
e2 n2 gndf value = {v(vee,gndf)}
.model sw1 vswitch
+ ron=100
+ roff=1e+009
+ von=0.05
+ voff=0
.model sw2 vswitch
+ ron=100
+ roff=1e+009
+ von=-0.05
+ voff=0
.ends
*$
**************
**          **
**          **
**************
.subckt vnse 1 2 params: nlf_nv_rthz=4 flw_hz=2 nvr_nv_rthz=8000
.PARAM GLF={PWR(flw_hz,0.25)*nlf_nv_rthz/1164}
.PARAM RNV={1.184*PWR(nvr_nv_rthz,2)}
.MODEL DVN D KF={PWR(flw_hz,0.5)/1E11} IS=1.0E-16
I1 0 7 10E-3
I2 0 8 10E-3
D1 7 0 DVN
D2 8 0 DVN
E1 3 6 7 8 {GLF}
R1 3 0 1E9
R2 3 0 1E9
R3 3 6 1E9
E2 6 4 5 0 10
R4 5 0 {RNV}
R5 5 0 {RNV}
R6 3 4 1E9
R7 4 0 1E9
E3 1 2 3 4 1
C1 1 0 1E-15
C2 2 0 1E-15
C3 1 2 1E-15
.ends
*$
**************
**          **
**          **
**************
.subckt voltage_ref_noise 1 2 params: noise_1f_nv_rthz = 100 noise_1f_freq =
+  150 noise_flat_nv_rthz = 94
.PARAM GLF={PWR(NOISE_1F_FREQ,0.25)*NOISE_1F_NV_RTHZ/1164}
.PARAM RNV={1.184*PWR(NOISE_FLAT_NV_RTHZ,2)}
.MODEL DVN D KF={PWR(NOISE_1F_FREQ,0.5)/1E11} IS=1.0E-16
I1 0 7 10E-3
I2 0 8 10E-3
D1 7 0 DVN
D2 8 0 DVN
E1 3 6 7 8 {GLF}
R1 3 0 1E9
R2 3 0 1E9
R3 3 6 1E9
E2 6 4 5 0 10
R4 5 0 {RNV}
R5 5 0 {RNV}
R6 3 4 1E9
R7 4 0 1E9
E3 1 2 3 4 1
C1 1 0 1E-15
C2 2 0 1E-15
C3 1 2 1E-15
.ENDS
*$
**************
**          **
**          **
**************
.SUBCKT DAC_LADDER_N REF GND OUT VLSB V_B_TRUE NOISE_IN B23 B22 B21 B20 B19 B18 B17 B16
+ B15 B14 B13 B12 B11 B10 B9 B8 B7 B6 B5 B4 B3 B2 B1 B0
+ PARAMS: N = 16
**
.PARAM M = {PWR(2,N)}
.PARAM ZERO_CODE_ERR_LSB = 3.3
.PARAM FULL_SCALE_ERR_LSB = -3.3
.PARAM FULL_SCALE_NOISE = 50
.PARAM HALF_SCALE_NOISE = 74
.PARAM MIN_SCALE_NOISE = 93
.PARAM HALF_SCALE_NG = {HALF_SCALE_NOISE/MIN_SCALE_NOISE}
.PARAM FULL_SCALE_NG = {FULL_SCALE_NOISE/MIN_SCALE_NOISE}
* Assumed decision threshold for digital inputs
* V_B_TRUE is the voltage for a TRUE digital input
ETHR NTHR 0 VALUE = {V(V_B_TRUE,GND)/2}
* Internal REF voltage ref'd to true ground
EREF NREF 0 VALUE = {V(REF,GND)}
* LSB voltage
ELSB VLSB 0 VALUE = {V(NREF)/M}
* Ideal DAC function
* Convert digital input voltages to 1's and 0's
* units are amps summed into a 1 ohm resistor
GN15 0 N1 VALUE = {IF(N >= 16,PWR(2,15)*IF(V(B15,GND) > V(NTHR),1,0),0)}
GN14 0 N1 VALUE = {IF(N >= 15,PWR(2,14)*IF(V(B14,GND) > V(NTHR),1,0),0)}
GN13 0 N1 VALUE = {IF(N >= 14,PWR(2,13)*IF(V(B13,GND) > V(NTHR),1,0),0)}
GN12 0 N1 VALUE = {IF(N >= 13,PWR(2,12)*IF(V(B12,GND) > V(NTHR),1,0),0)}
GN11 0 N1 VALUE = {IF(N >= 12,PWR(2,11)*IF(V(B11,GND) > V(NTHR),1,0),0)}
GN10 0 N1 VALUE = {IF(N >= 11,PWR(2,10)*IF(V(B10,GND) > V(NTHR),1,0),0)}
GN9  0 N1 VALUE = {IF(N >= 10,PWR(2,9)*IF(V(B9,GND) > V(NTHR),1,0),0)}
GN8  0 N1 VALUE = {IF(N >=  9,PWR(2,8)*IF(V(B8,GND) > V(NTHR),1,0),0)}
GN7  0 N1 VALUE = {IF(N >=  8,PWR(2,7)*IF(V(B7,GND) > V(NTHR),1,0),0)}
GN6  0 N1 VALUE = {IF(N >=  7,PWR(2,6)*IF(V(B6,GND) > V(NTHR),1,0),0)}
GN5  0 N1 VALUE = {IF(N >=  6,PWR(2,5)*IF(V(B5,GND) > V(NTHR),1,0),0)}
GN4  0 N1 VALUE = {IF(N >=  5,PWR(2,4)*IF(V(B4,GND) > V(NTHR),1,0),0)}
GN3  0 N1 VALUE = {IF(N >=  4,PWR(2,3)*IF(V(B3,GND) > V(NTHR),1,0),0)}
GN2  0 N1 VALUE = {IF(N >=  3,PWR(2,2)*IF(V(B2,GND) > V(NTHR),1,0),0)}
GN1  0 N1 VALUE = {IF(N >=  2,PWR(2,1)*IF(V(B1,GND) > V(NTHR),1,0),0)}
GN0  0 N1 VALUE = {IF(N >=  1,PWR(2,0)*IF(V(B0,GND) > V(NTHR),1,0),0)}
R1 N1 0 1
**
** For gain w/respect to external noise source (@ NOISE_IN pin), see TABLE below
** range of N2 is from 0 to 1-1/M. This scaling which interacts with the noise
** gain below will not change with different DAC resolutions.
G2 0 N2 VALUE = {(V(N1)/M)}
R2 N2 0 1
** Scale ideal DAC to LSB voltage
** node N3 just below results from limiting the ideal DAC with zero and full-scale errors
** The noise also sums into this node before this subcircuit's final output.
*G3 0 N3 VALUE = {V(NREF)*V(N2)}
G3 0 N3 VALUE = {MAX(MIN(V(NREF)*V(N2),V(VLSB)*(M-FULL_SCALE_ERR_LSB)),V(VLSB)*ZERO_CODE_ERR_LSB)}
R3 N3 0 1
**
EOUT OUT GND N3 0 1
**
* Noise gain interpolation between min, half and full scale
* The first entry (0,1) means the DAC ladder noise will be equal to the
* external noise source at minimum scale. At
********
EG NG 0 TABLE {V(N2)} = (0,1) (0.5,{HALF_SCALE_NG}) ({1-(1/M)},{FULL_SCALE_NG})
**EG NG 0 TABLE {V(N2)} = (0,1)
* Scale noise from external noise source and and sum w/noiseless DAC output
G4 0 N3 VALUE = {V(NG)*V(NOISE_IN,GND)}
.ENDS
*$
**************
**          **
**          **
**************
.SUBCKT VCLAMP_W_CLAW   VDD  VSS  VI  VO VIMON  GNDF
+ PARAMS: VMAXIO = 0 VMINIO = 0 SLOPE = 0
EPCLIP  VDD_CLP 0 VALUE = {V(VDD,GNDF) - SLOPE*V(VIMON) - VMAXIO}
ENCLIP  VSS_CLP 0 VALUE = {V(VSS,GNDF) - SLOPE*V(VIMON) + VMINIO}
ECLAMP  VO GNDF VALUE = {LIMIT(V(VI,GNDF), V(VDD_CLP), V(VSS_CLP))}
.ENDS
*$
**************
**          **
**          **
**************
.SUBCKT PSRR   VDD  VSS  VI  VO  GNDF PARAMS: PSRR = 130 FPSRR = 1.6
.PARAM PI = 3.141592
.PARAM RPSRR = 1
.PARAM GPSRR = {PWR(10,-PSRR/20)/RPSRR}
.PARAM LPSRR = {RPSRR/(2*PI*FPSRR)}
G1  GNDF 1 VDD VSS {GPSRR}
R1  1 2 {RPSRR}
L1  2 GNDF {LPSRR}
E1  VO VI 1 GNDF 1
C2  VDD VSS 10P
.ENDS
*$
**************
**          **
**          **
**************
.SUBCKT AMETER   VI  VO VIMON
+ PARAMS: GAIN = 1
VSENSE VI VO DC = 0
EMETER VIMON 0 VALUE = {I(VSENSE)*GAIN}
.ENDS
*$
**************
**          **
**          **
**************
.SUBCKT OUT_CURRENT_CLAMP  IN  OUT
+PARAMS: RSER = 1 IMAX = 10M  IMIN = 10M
GRESP  IN OUT VALUE = {LIMIT(V(IN,OUT)/RSER,IMAX,-IMIN)}
*GRESP  OUTx OUT VALUE = {LIMIT(V(OUTx,OUT)/RSER,IMAX,-IMIN)}
*GRESN  IN OUTx VALUE = {-V(IN,OUTx)/RSER}
.ENDS
*$
**************
**          **
**          **
**************
* Nominal value on VREF is in volts
* OUTPUT DRIFT IS IN UNITS OF PPM
* OUTPUT LOAD CURRENT is in units of mA
* IOUT at VOUT=0 (short-circuit current) is in mA
* R_OUT is in units of Ohms
* LINE REGULATION is in units of uV/V
.SUBCKT VOLTAGE_REF VOUT REF_VIN VCC GND PARAMS: REF_VIN_NOM_V=2.5 DRIFT_OUT_PPM=5
+ ILOAD_MA=5 ISC_MA= 8 R_OUT_OHMS=0.1 LINE_REG_UVPV=20
*
.PARAM TEMP_NOM = 27
.PARAM REQ = {REF_VIN_NOM_V/ABS(1m*(ISC_MA - ILOAD_MA))}
**
* Calc output voltage variation from temp drift
EDRIFT NDRIFT 0 VALUE = {DRIFT_OUT_PPM*(1e-6)*(TEMP - TEMP_NOM)}
**
* Calc output voltage variation from input line regulation
ELREG NLREG 0 VALUE = {LINE_REG_UVPV*(1e-6)*(V(REF_VIN,GND) - REF_VIN_NOM_V)}
**
* Add'l voltage drop to model VOUT drop w/increasing IOUT > ILOAD_MA
* Tiered IF/THEN below first tests for IOUT < ILOAD_MA. If TRUE, the output voltage is not dropped because of IOUT.
* If FALSE, IOUT is > ILOAD_MA, and use second IF to test for IOUT <= short-circuit current. If TRUE then the
* VOUT is decreased/increased by the linear function ABS(I(VIMON))-1m*ILOAD_MA)*REQ.
* If the second IF is FALSE, the VOUT is forced to zero by subtracting its value before going to the output pin.
E1 N1 0 VALUE = {IF(ABS(I(VIMON)) <= 1m*ILOAD_MA,0,IF(ABS(I(VIMON)) <= 1m*ISC_MA,-(ABS(I(VIMON))-1m*ILOAD_MA)*REQ,-V(REF_VIN,GND)))}
**
EO NOUT1 GND VALUE = {REF_VIN_NOM_V + V(NDRIFT) + V(NLREG) + V(N1)}
* Nominal output resistance
VIMON NOUT1 NOUT2 0
RO VOUT NOUT2 {R_OUT_OHMS}
.ENDS
*$
**************
**          **
**          **
**************
**************
**          **
**          **
**************
*** This subcircuit uses a lookup table for DAC INL.
*** It computes an equivalent analog value of the digital input codes
*** with a maximum of 24 bits : V(DAC_CODE,GND).
*** It then uses this to reference a table of INL values
****
.SUBCKT DAC_INL_TABLE VOUT GND VTRUE VLSB B23 B22 B21 B20 B19 B18 B17 B16
+ B15 B14 B13 B12 B11 B10 B9 B8 B7 B6 B5 B4 B3 B2 B1 B0
***
***
*** Calculate analog equivalent of DAC input code
*** This will serve as the indepedent variable (x) to a SPICE TABLE
*** of INL versus DAC input code.
E1 DAC_CODE GND VALUE =
+  {V(B23,GND)*PWR(2,23)/V(VTRUE,GND)
+ + V(B22,GND)*PWR(2,22)/V(VTRUE,GND)
+ + V(B21,GND)*PWR(2,21)/V(VTRUE,GND)
+ + V(B20,GND)*PWR(2,20)/V(VTRUE,GND)
+ + V(B19,GND)*PWR(2,19)/V(VTRUE,GND)
+ + V(B18,GND)*PWR(2,18)/V(VTRUE,GND)
+ + V(B17,GND)*PWR(2,17)/V(VTRUE,GND)
+ + V(B16,GND)*PWR(2,16)/V(VTRUE,GND)
+ + V(B15,GND)*PWR(2,15)/V(VTRUE,GND)
+ + V(B14,GND)*PWR(2,14)/V(VTRUE,GND)
+ + V(B13,GND)*PWR(2,13)/V(VTRUE,GND)
+ + V(B12,GND)*PWR(2,12)/V(VTRUE,GND)
+ + V(B11,GND)*PWR(2,11)/V(VTRUE,GND)
+ + V(B10,GND)*PWR(2,10)/V(VTRUE,GND)
+ + V(B9,GND)*PWR(2,9)/V(VTRUE,GND)
+ + V(B8,GND)*PWR(2,8)/V(VTRUE,GND)
+ + V(B7,GND)*PWR(2,7)/V(VTRUE,GND)
+ + V(B6,GND)*PWR(2,6)/V(VTRUE,GND)
+ + V(B5,GND)*PWR(2,5)/V(VTRUE,GND)
+ + V(B4,GND)*PWR(2,4)/V(VTRUE,GND)
+ + V(B3,GND)*PWR(2,3)/V(VTRUE,GND)
+ + V(B2,GND)*PWR(2,2)/V(VTRUE,GND)
+ + V(B1,GND)*PWR(2,1)/V(VTRUE,GND)
+ + V(B0,GND)*PWR(2,0)/V(VTRUE,GND)}
****
**** Buffered output
*E3 = VOUT GND V_INL GND 1
E3 = VOUT GND VALUE = {V(VLSB,GND)*V(V_INL_LSB,GND)}
****
****
** TABLE of 16b INL points where (x,y) = (DAC code, INL(in LSBs)).
** Spice does a linear interpolation of INL if DAC_CODE
** falls between DAC_CODE points in the table
E2 V_INL_LSB GND TABLE {V(DAC_CODE,GND)} =
+      (0,0.05688623092137280)
+      (128,0.06818016732868270)
+      (256,-0.08436589625780470)
+      (384,-0.08945595984696410)
+      (512,-0.02901002343860450)
+      (640,-0.00133208702609409)
+      (768,-0.03919015061401300)
+      (896,-0.06066421420546250)
+      (1024,0.08170172220561650)
+      (1152,0.04384365861769770)
+      (1280,-0.05955040497356090)
+      (1408,0.00089553143770900)
+      (1536,0.01218946784792930)
+      (1664,0.05625140425981950)
+      (1792,-0.06352665932790840)
+      (1920,-0.03584872292121870)
+      (2048,0.02459721349005120)
+      (2176,0.05227514990256170)
+      (2304,-0.10027091368683600)
+      (2432,-0.00705697727680672)
+      (2560,0.03700495913508350)
+      (2688,0.04829889554530380)
+      (2816,-0.07147916804533450)
+      (2944,-0.01103323163115420)
+      (3072,0.09856470477534460)
+      (3200,0.12624264118785500)
+      (3328,0.00646457759867189)
+      (3456,0.03414251400972720)
+      (3584,0.07820445042016220)
+      (3712,0.10588238683121700)
+      (3840,-0.03027967675880060)
+      (3968,0.01378225965163440)
+      (4096,0.04146019606414480)
+      (4224,0.05275413247436520)
+      (4352,-0.03425593111605850)
+      (4480,0.00980600529437652)
+      (4608,0.02109994170605210)
+      (4736,0.04877787811710730)
+      (4864,-0.07100018547353100)
+      (4992,-0.04332224906102060)
+      (5120,0.03350768734962910)
+      (5248,0.07756962376006410)
+      (5376,-0.09136043983016860)
+      (5504,-0.01453050341806370)
+      (5632,0.04591543299175100)
+      (5760,0.05720936940197130)
+      (5888,-0.01341669418616220)
+      (6016,-0.00212275777594186)
+      (6144,0.09109117863408760)
+      (6272,0.10238511504430800)
+      (6400,0.01537505145679460)
+      (6528,-0.02248301213257950)
+      (6656,0.02157892427785560)
+      (6784,0.06564086068829060)
+      (6912,-0.02136920290067790)
+      (7040,0.00630873350892216)
+      (7168,0.13229066992062100)
+      (7296,0.11081660633208200)
+      (7424,0.04019054274249360)
+      (7552,0.03510047915187900)
+      (7680,0.09554641556460410)
+      (7808,0.12322435197420400)
+      (7936,0.03621428838523570)
+      (8064,0.03112422479462110)
+      (8192,0.02603416120691690)
+      (8320,0.03732809761713720)
+      (8448,-0.08244996597204590)
+      (8576,-0.05477202956099060)
+      (8704,0.00567390684882412)
+      (8832,0.01696784326049960)
+      (8960,-0.10281022033013900)
+      (9088,-0.04236428391741360)
+      (9216,0.05084965249261590)
+      (9344,0.07852758890221590)
+      (9472,-0.04125047468551200)
+      (9600,-0.04634053827467140)
+      (9728,0.01410539813514330)
+      (9856,0.07455133454568570)
+      (9984,-0.01245872904401040)
+      (10112,-0.01754879263244220)
+      (10240,0.02651314377799280)
+      (10368,0.05419108018904810)
+      (10496,-0.06558698340013510)
+      (10624,-0.03790904698980740)
+      (10752,0.00615288942135521)
+      (10880,0.01744682583157560)
+      (11008,-0.08594723775750030)
+      (11136,-0.05826930134717260)
+      (11264,0.01856063506420470)
+      (11392,0.04623857147526000)
+      (11520,-0.02438749211505640)
+      (11648,-0.01309355570338080)
+      (11776,0.06373638070654120)
+      (11904,0.10779831711770400)
+      (12032,-0.01197974647220690)
+      (12160,0.01569818993884840)
+      (12288,-0.02215987364979810)
+      (12416,-0.02724993723968510)
+      (12544,-0.14702800082886800)
+      (12672,-0.11935006441854100)
+      (12800,-0.05890412800727060)
+      (12928,-0.03122619159694300)
+      (13056,-0.13462025518601900)
+      (13184,-0.13971031877517800)
+      (13312,-0.06288038236452850)
+      (13440,-0.00243444595398614)
+      (13568,-0.10582850954306200)
+      (13696,-0.11091857313222100)
+      (13824,-0.01770463672146430)
+      (13952,0.00997329968922713)
+      (14080,-0.09342076390021250)
+      (14208,-0.06574282748952100)
+      (14336,0.01108710892112870)
+      (14464,0.02238104533207660)
+      (14592,-0.11378101825685000)
+      (14720,-0.06971908184641510)
+      (14848,-0.02565714543561630)
+      (14976,0.00202079097507522)
+      (15104,-0.08498927261425710)
+      (15232,-0.04092733620364020)
+      (15360,0.03590260020719140)
+      (15488,0.04719653661795750)
+      (15616,-0.07258152697140760)
+      (15744,-0.01213559056059240)
+      (15872,0.01554234585009910)
+      (16000,0.04322028226083600)
+      (16128,-0.06017378132846720)
+      (16256,0.01665615508227350)
+      (16384,-0.05396990850698910)
+      (16512,-0.00990797209624361)
+      (16640,-0.12968603568556300)
+      (16768,-0.10200809927482600)
+      (16896,-0.05794616286402740)
+      (17024,-0.03026822645333600)
+      (17152,-0.15004629004261000)
+      (17280,-0.12236835363182800)
+      (17408,-0.02915441722107060)
+      (17536,-0.03424448081041190)
+      (17664,-0.10487054439981900)
+      (17792,-0.07719260798894540)
+      (17920,-0.00036267157829570)
+      (18048,0.01093126483247030)
+      (18176,-0.12523079875682000)
+      (18304,-0.09755286234612870)
+      (18432,0.01204507406473570)
+      (18560,0.00695501047557627)
+      (18688,-0.12920705311371400)
+      (18816,-0.08514511670327920)
+      (18944,-0.04108318029248040)
+      (19072,0.03574675611816930)
+      (19200,-0.08403130747101390)
+      (19328,-0.03996937106057890)
+      (19456,0.06962856535064930)
+      (19584,0.08092250176123340)
+      (19712,-0.00608756182846264)
+      (19840,0.02159037458259260)
+      (19968,0.06565231099375520)
+      (20096,0.09333024740408290)
+      (20224,-0.04283181618520760)
+      (20352,-0.03153787977425960)
+      (20480,-0.03662794336341900)
+      (20608,-0.05810200695341340)
+      (20736,-0.16149607054248900)
+      (20864,-0.15020213413081400)
+      (20992,-0.08975619772099890)
+      (21120,-0.04569426130983630)
+      (21248,-0.14908832489964000)
+      (21376,-0.08864238848836980)
+      (21504,0.00457154792165966)
+      (21632,0.01586548433260760)
+      (21760,-0.10391257925584800)
+      (21888,-0.05985064284541300)
+      (22016,-0.01578870643497790)
+      (22144,0.01188922997534970)
+      (22272,-0.07512083361361870)
+      (22400,-0.03105889720318370)
+      (22528,0.01300303920797890)
+      (22656,0.05706497561914150)
+      (22784,-0.06271308797076930)
+      (22912,-0.05141915155982130)
+      (23040,0.00902678485144861)
+      (23168,0.00393672126228921)
+      (23296,-0.06668934232729950)
+      (23424,-0.07177940591791410)
+      (23552,0.07058653049462010)
+      (23680,0.06549646690400550)
+      (23808,-0.05428159668517760)
+      (23936,-0.05937166027288190)
+      (24064,0.03384227613714760)
+      (24192,0.06152021254674760)
+      (24320,-0.05825785104243550)
+      (24448,-0.01419591463054530)
+      (24576,0.16093802177929300)
+      (24704,0.17223195818951400)
+      (24832,0.05245389460178560)
+      (24960,0.09651583101222060)
+      (25088,0.15696176742203500)
+      (25216,0.18463970383309100)
+      (25344,0.04847764024452770)
+      (25472,0.10892357665434200)
+      (25600,0.20213751306437200)
+      (25728,0.19704744947666800)
+      (25856,0.09365338588686430)
+      (25984,0.12133132229792000)
+      (26112,0.18177725870773400)
+      (26240,0.24222319511900400)
+      (26368,0.08967713152960640)
+      (26496,0.11735506794066200)
+      (26624,0.17780100435193200)
+      (26752,0.15632694076193700)
+      (26880,0.06931687717296880)
+      (27008,0.09699481358256890)
+      (27136,0.19020874999405400)
+      (27264,0.18511868640489400)
+      (27392,0.09810862281592560)
+      (27520,0.14217055922636100)
+      (27648,0.23538449563784500)
+      (27776,0.29583043204766000)
+      (27904,0.15966836845764200)
+      (28032,0.20373030486953200)
+      (28160,0.23140824128058700)
+      (28288,0.27547017769102200)
+      (28416,0.13930811410246000)
+      (28544,0.18337005051289500)
+      (28672,0.11274398692330600)
+      (28800,0.14042192333290600)
+      (28928,0.00425985974434298)
+      (29056,0.03193779615539820)
+      (29184,0.12515173256542800)
+      (29312,0.12006166897772300)
+      (29440,0.00028360538708512)
+      (29568,0.10988154179940500)
+      (29696,0.18671147821005400)
+      (29824,0.19800541461736400)
+      (29952,0.11099535103130600)
+      (30080,0.12228928744152700)
+      (30208,0.16635122385050600)
+      (30336,0.19402916026301700)
+      (30464,0.12340309667342800)
+      (30592,0.15108103308302800)
+      (30720,0.19514296949491800)
+      (30848,0.22282090590451800)
+      (30976,0.08665884231450040)
+      (31104,0.11433677872701100)
+      (31232,0.19116671513766100)
+      (31360,0.20246065154788100)
+      (31488,0.06629858796077310)
+      (31616,0.06120852436870340)
+      (31744,0.20357446077978200)
+      (31872,0.23125239719229300)
+      (32000,0.09509033360227480)
+      (32128,0.15553627001354500)
+      (32256,0.19959820642543500)
+      (32384,0.22727614283503500)
+      (32512,0.12388207924668700)
+      (32640,0.15156001565337600)
+      (32768,-0.09929004793521020)
+      (32896,-0.08799611152207950)
+      (33024,-0.17500617511395800)
+      (33152,-0.16371223870082800)
+      (33280,-0.10326630228955800)
+      (33408,-0.09197236588224770)
+      (33536,-0.21175042946997600)
+      (33664,-0.13492049305641600)
+      (33792,-0.02532255664991680)
+      (33920,0.00235537976259366)
+      (34048,-0.15019068382680400)
+      (34176,-0.12251274741720400)
+      (34304,-0.07845081100531390)
+      (34432,-0.05077287459571380)
+      (34560,-0.17055093818344200)
+      (34688,-0.12648900177155200)
+      (34816,-0.04965906536381230)
+      (34944,-0.03836512895068150)
+      (35072,-0.14175919253903000)
+      (35200,-0.11408125612943000)
+      (35328,-0.08640331971982960)
+      (35456,-0.07510938330669890)
+      (35584,-0.16211944689857800)
+      (35712,-0.11805751048668800)
+      (35840,-0.02484357407665810)
+      (35968,0.03560236233461180)
+      (36096,-0.08417570125311610)
+      (36224,-0.07288176484580620)
+      (36352,-0.02881982843391600)
+      (36480,0.01524210797797420)
+      (36608,-0.10453595561266400)
+      (36736,-0.10962601920182400)
+      (36864,-0.14748408278974200)
+      (36992,-0.11980614638014200)
+      (37120,-0.23958420996787000)
+      (37248,-0.19552227355598000)
+      (37376,-0.13507633714762100)
+      (37504,-0.10739840073511000)
+      (37632,-0.19440846432698900)
+      (37760,-0.18311452791676900)
+      (37888,-0.05713259150506930)
+      (38016,-0.04583865509484890)
+      (38144,-0.13284871868381700)
+      (38272,-0.13793878227006600)
+      (38400,-0.11026084586337700)
+      (38528,-0.04981490945210680)
+      (38656,-0.15320897304045500)
+      (38784,-0.12553103663085500)
+      (38912,-0.06508510021958500)
+      (39040,-0.05379116380645430)
+      (39168,-0.14080122739833300)
+      (39296,-0.16227529098687200)
+      (39424,-0.06906135457684290)
+      (39552,-0.04138341816433240)
+      (39680,-0.19392948175373000)
+      (39808,-0.14986754534475000)
+      (39936,-0.05665360893181060)
+      (40064,-0.04535967252159030)
+      (40192,-0.13236973611346900)
+      (40320,-0.12107579970033800)
+      (40448,-0.04424586328968870)
+      (40576,-0.04933592687884810)
+      (40704,-0.15272999046719600)
+      (40832,-0.12505205405759600)
+      (40960,0.00092988235119265)
+      (41088,0.02860781876370310)
+      (41216,-0.12393824482569500)
+      (41344,-0.07987630841380450)
+      (41472,-0.01943037200253460)
+      (41600,0.00824756440415513)
+      (41728,-0.11153049918357300)
+      (41856,-0.08385256277106240)
+      (41984,0.02574537363834680)
+      (42112,0.05342331005085730)
+      (42240,-0.06635475353978110)
+      (42368,-0.02229281713080130)
+      (42496,0.05453711928275880)
+      (42624,0.03306305569130930)
+      (42752,-0.02117900789598930)
+      (42880,-0.00988507148576900)
+      (43008,0.03417686492321080)
+      (43136,0.09462280133739110)
+      (43264,-0.02515526225324720)
+      (43392,-0.01386132584302690)
+      (43520,0.06296861056471240)
+      (43648,0.07426254698075350)
+      (43776,-0.04551551660988480)
+      (43904,0.01493041979847480)
+      (44032,0.09176035621203480)
+      (44160,0.11943829262163500)
+      (44288,-0.00033977096900344)
+      (44416,-0.00542983455816284)
+      (44544,0.13693610185291600)
+      (44672,0.11546203826437700)
+      (44800,-0.00431602532626130)
+      (44928,0.03974591108271850)
+      (45056,-0.01449615250458010)
+      (45184,0.02956578391022050)
+      (45312,-0.12298027968499800)
+      (45440,-0.07891834327601830)
+      (45568,-0.01847240685601720)
+      (45696,-0.02356247045099740)
+      (45824,-0.11057253404287600)
+      (45952,-0.09927859762683510)
+      (46080,0.02670333878486420)
+      (46208,0.05438127518864350)
+      (46336,-0.01624478839221410)
+      (46464,-0.00495085198781453)
+      (46592,0.00634308442240581)
+      (46720,0.08317302083596590)
+      (46848,-0.05298904275405220)
+      (46976,-0.02531110634445210)
+      (47104,0.03513483006390740)
+      (47232,0.06281276647932830)
+      (47360,-0.04058129711193030)
+      (47488,-0.04567136070108970)
+      (47616,0.03115857571247030)
+      (47744,0.04245251212269070)
+      (47872,-0.04455755146918820)
+      (48000,-0.01687961505376730)
+      (48128,0.05995032135397200)
+      (48256,0.10401225776295200)
+      (48384,0.00061819417751394)
+      (48512,-0.00447186941164546)
+      (48640,0.07235806699609380)
+      (48768,0.11642000341089400)
+      (48896,0.01302593981963580)
+      (49024,0.04070387622923590)
+      (49152,-0.07907418735558170)
+      (49280,-0.05139625095180240)
+      (49408,-0.17117431454244100)
+      (49536,-0.17626437812577900)
+      (49664,-0.11581844171742000)
+      (49792,-0.10452450530719900)
+      (49920,-0.19153456889325800)
+      (50048,-0.13108863248489800)
+      (50176,-0.02149069607839920)
+      (50304,-0.04296475966111760)
+      (50432,-0.16274282325175600)
+      (50560,-0.10229688684339600)
+      (50688,-0.04185095043503680)
+      (50816,-0.04694101401837540)
+      (50944,-0.13395107761025400)
+      (51072,-0.10627314120065400)
+      (51200,-0.04582720478647390)
+      (51328,-0.01814926837687380)
+      (51456,-0.17069533197209200)
+      (51584,-0.11024939555209100)
+      (51712,-0.03341945914435200)
+      (51840,-0.00574152273475192)
+      (51968,-0.12551958632539000)
+      (52096,-0.08145764991641040)
+      (52224,0.01175628649652940)
+      (52352,0.02305022291257050)
+      (52480,-0.06395984067930840)
+      (52608,-0.06904990427428860)
+      (52736,-0.02498796785948800)
+      (52864,0.01907396854949180)
+      (52992,-0.10070409504114600)
+      (53120,-0.08941015862510540)
+      (53248,-0.11088422221364500)
+      (53376,-0.09959028580924500)
+      (53504,-0.21936834939406300)
+      (53632,-0.19169041298446200)
+      (53760,-0.14762847657548300)
+      (53888,-0.11995054016588300)
+      (54016,-0.19057660375256100)
+      (54144,-0.19566666734172000)
+      (54272,-0.08606873093522150)
+      (54400,-0.05839079451980070)
+      (54528,-0.14540085811168000)
+      (54656,-0.13410692170145900)
+      (54784,-0.09004498528665860)
+      (54912,-0.07875104887643830)
+      (55040,-0.16576111246831700)
+      (55168,-0.15446717605227600)
+      (55296,-0.07763723964453680)
+      (55424,-0.06634330323431640)
+      (55552,-0.15335336682037500)
+      (55680,-0.14205943041597500)
+      (55808,-0.06522949400241490)
+      (55936,-0.03755155758699400)
+      (56064,-0.12456162117887300)
+      (56192,-0.12965168477385300)
+      (56320,-0.05282174835447220)
+      (56448,0.04039218805264680)
+      (56576,-0.04661787553923200)
+      (56704,-0.05170793912257070)
+      (56832,0.02512199728516860)
+      (56960,0.03641593369538900)
+      (57088,-0.03421012989128940)
+      (57216,-0.00653219348168932)
+      (57344,0.07029774292605000)
+      (57472,0.06520767933689060)
+      (57600,-0.05457038425374780)
+      (57728,0.02225955215981230)
+      (57856,0.08270548856817190)
+      (57984,0.09399942497839220)
+      (58112,-0.04216263861162590)
+      (58240,-0.01448470220202580)
+      (58368,0.07872923421091400)
+      (58496,0.10640717062051400)
+      (58624,0.01939710702863520)
+      (58752,0.01430704344529660)
+      (58880,0.07475297985365610)
+      (59008,0.13519891626201600)
+      (59136,-0.00096314732218161)
+      (59264,0.05948278908617790)
+      (59392,0.11992872549453800)
+      (59520,0.11483866191119900)
+      (59648,-0.00493940167943947)
+      (59776,0.07189053472829980)
+      (59904,0.08318447114434090)
+      (60032,0.11086240755394100)
+      (60160,0.05662034396082160)
+      (60288,0.05153028037748300)
+      (60416,0.16112821678398200)
+      (60544,0.20519015319296200)
+      (60672,0.08541208960814400)
+      (60800,0.08032202601898460)
+      (60928,0.15715196242672400)
+      (61056,0.18482989883632400)
+      (61184,0.11420383524964600)
+      (61312,0.10911377166048600)
+      (61440,0.03848770806798710)
+      (61568,0.04978164448402820)
+      (61696,-0.05361241910723040)
+      (61824,-0.02593448270345110)
+      (61952,0.00174345371196978)
+      (62080,0.07857339012552980)
+      (62208,-0.00843667346634902)
+      (62336,0.03562526294845160)
+      (62464,0.09607119935681110)
+      (62592,0.12374913576641100)
+      (62720,0.02035507218097340)
+      (62848,0.01526500858599320)
+      (62976,0.09209494499373250)
+      (63104,0.13615688140853300)
+      (63232,0.03276281781727450)
+      (63360,0.06044075422687460)
+      (63488,0.10450269064167500)
+      (63616,0.11579662705189500)
+      (63744,0.04517056345939640)
+      (63872,0.02369649987667800)
+      (64000,0.16606243628775700)
+      (64128,0.14458837269339700)
+      (64256,0.05757830910151820)
+      (64384,0.03610424551879990)
+      (64512,0.19485418192343800)
+      (64640,0.22253211833303800)
+      (64768,0.08637005474884060)
+      (64896,0.13043199115782000)
+      (65024,0.22364592756493900)
+      (65152,0.21855586398160100)
+      (65280,0.09877780039096250)
+      (65408,0.09877780039096250)
****
****
.ENDS
*$
