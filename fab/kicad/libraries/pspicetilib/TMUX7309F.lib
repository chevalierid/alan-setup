.SUBCKT TMUX7309F A0 EN VSS S1A S2A S3A S4A DA DB S4B S3B S2B S1B VDD GND A1


X_U101 A0 EN VSS S1A_IN S2A_IN S3A_IN S4A_IN DA DB S4B_IN S3B_IN S2B_IN S1B_IN VDD GND A1 TMUX7309F_IN


X_U112 S1A VDD VSS PF1A NF1A F1A Fault_Detect_Block_Sx
X_U122 S2A VDD VSS PF2A NF2A F2A Fault_Detect_Block_Sx
X_U132 S3A VDD VSS PF3A NF3A F3A Fault_Detect_Block_Sx
X_U142 S4A VDD VSS PF4A NF4A F4A Fault_Detect_Block_Sx
X_U152 S1B VDD VSS PF1B NF1B F1B Fault_Detect_Block_Sx
X_U162 S2B VDD VSS PF2B NF2B F2B Fault_Detect_Block_Sx
X_U172 S3B VDD VSS PF3B NF3B F3B Fault_Detect_Block_Sx
X_U182 S4B VDD VSS PF4B NF4B F4B Fault_Detect_Block_Sx



X_U113 A0 A1 EN FaultLogicOutputPos_S1A PF1A Control_and_Fault_Logic_S1A
X_U123 A0 A1 EN FaultLogicOutputPos_S2A PF2A Control_and_Fault_Logic_S2A
X_U133 A0 A1 EN FaultLogicOutputPos_S3A PF3A Control_and_Fault_Logic_S3A
X_U143 A0 A1 EN FaultLogicOutputPos_S4A PF4A Control_and_Fault_Logic_S4A
X_U153 A0 A1 EN FaultLogicOutputPos_S1B PF1B Control_and_Fault_Logic_S1B
X_U163 A0 A1 EN FaultLogicOutputPos_S2B PF2B Control_and_Fault_Logic_S2B
X_U173 A0 A1 EN FaultLogicOutputPos_S3B PF3B Control_and_Fault_Logic_S3B
X_U183 A0 A1 EN FaultLogicOutputPos_S4B PF4B Control_and_Fault_Logic_S4B


X_U114 A0 A1 EN FaultLogicOutputNeg_S1A NF1A Control_and_Fault_Logic_S1A
X_U124 A0 A1 EN FaultLogicOutputNeg_S2A NF2A Control_and_Fault_Logic_S2A
X_U134 A0 A1 EN FaultLogicOutputNeg_S3A NF3A Control_and_Fault_Logic_S3A
X_U144 A0 A1 EN FaultLogicOutputNeg_S4A NF4A Control_and_Fault_Logic_S4A
X_U154 A0 A1 EN FaultLogicOutputNeg_S1B NF1B Control_and_Fault_Logic_S1B
X_U164 A0 A1 EN FaultLogicOutputNeg_S2B NF2B Control_and_Fault_Logic_S2B
X_U174 A0 A1 EN FaultLogicOutputNeg_S3B NF3B Control_and_Fault_Logic_S3B
X_U184 A0 A1 EN FaultLogicOutputNeg_S4B NF4B Control_and_Fault_Logic_S4B



X_U115 FaultLogicOutputPos_S1A VSS GND DelayedPosFault_S1A Delay_pos
X_U125 FaultLogicOutputPos_S2A VSS GND DelayedPosFault_S2A Delay_pos
X_U135 FaultLogicOutputPos_S3A VSS GND DelayedPosFault_S3A Delay_pos
X_U145 FaultLogicOutputPos_S4A VSS GND DelayedPosFault_S4A Delay_pos
X_U155 FaultLogicOutputPos_S1B VSS GND DelayedPosFault_S1B Delay_pos
X_U165 FaultLogicOutputPos_S2B VSS GND DelayedPosFault_S2B Delay_pos
X_U175 FaultLogicOutputPos_S3B VSS GND DelayedPosFault_S3B Delay_pos
X_U185 FaultLogicOutputPos_S4B VSS GND DelayedPosFault_S4B Delay_pos


X_U116 FaultLogicOutputNeg_S1A VSS GND DelayedNegFault_S1A Delay_neg
X_U126 FaultLogicOutputNeg_S2A VSS GND DelayedNegFault_S2A Delay_neg
X_U136 FaultLogicOutputNeg_S3A VSS GND DelayedNegFault_S3A Delay_neg
X_U146 FaultLogicOutputNeg_S4A VSS GND DelayedNegFault_S4A Delay_neg
X_U156 FaultLogicOutputNeg_S1B VSS GND DelayedNegFault_S1B Delay_neg
X_U166 FaultLogicOutputNeg_S2B VSS GND DelayedNegFault_S2B Delay_neg
X_U176 FaultLogicOutputNeg_S3B VSS GND DelayedNegFault_S3B Delay_neg
X_U186 FaultLogicOutputNeg_S4B VSS GND DelayedNegFault_S4B Delay_neg



X_FaultSwitch_S1A  FINALFAULTLOGIC_S1A 0 S1A S1A_IN SCHEMATIC1_FaultSwitch_Sx
X_FaultSwitch_S2A  FINALFAULTLOGIC_S2A 0 S2A S2A_IN SCHEMATIC1_FaultSwitch_Sx
X_FaultSwitch_S3A  FINALFAULTLOGIC_S3A 0 S3A S3A_IN SCHEMATIC1_FaultSwitch_Sx
X_FaultSwitch_S4A  FINALFAULTLOGIC_S4A 0 S4A S4A_IN SCHEMATIC1_FaultSwitch_Sx
X_FaultSwitch_S1B  FINALFAULTLOGIC_S1B 0 S1B S1B_IN SCHEMATIC1_FaultSwitch_Sx
X_FaultSwitch_S2B  FINALFAULTLOGIC_S2B 0 S2B S2B_IN SCHEMATIC1_FaultSwitch_Sx
X_FaultSwitch_S3B  FINALFAULTLOGIC_S3B 0 S3B S3B_IN SCHEMATIC1_FaultSwitch_Sx
X_FaultSwitch_S4B  FINALFAULTLOGIC_S4B 0 S4B S4B_IN SCHEMATIC1_FaultSwitch_Sx



E_ABM1         FINALFAULTLOGIC_S1A 0 VALUE {
+  if(V(DELAYEDPOSFAULT_S1A)+V(DELAYEDNEGFAULT_S1A)>0.1,1,0)     }

E_ABM2         FINALFAULTLOGIC_S2A 0 VALUE {
+  if(V(DELAYEDPOSFAULT_S2A)+V(DELAYEDNEGFAULT_S2A)>0.1,1,0)     }

E_ABM3         FINALFAULTLOGIC_S3A 0 VALUE {
+  if(V(DELAYEDPOSFAULT_S3A)+V(DELAYEDNEGFAULT_S3A)>0.1,1,0)     }

E_ABM4         FINALFAULTLOGIC_S4A 0 VALUE {
+  if(V(DELAYEDPOSFAULT_S4A)+V(DELAYEDNEGFAULT_S4A)>0.1,1,0)     }

E_ABM5         FINALFAULTLOGIC_S1B 0 VALUE {
+  if(V(DELAYEDPOSFAULT_S1B)+V(DELAYEDNEGFAULT_S1B)>0.1,1,0)     }

E_ABM6         FINALFAULTLOGIC_S2B 0 VALUE {
+  if(V(DELAYEDPOSFAULT_S2B)+V(DELAYEDNEGFAULT_S2B)>0.1,1,0)     }

E_ABM7         FINALFAULTLOGIC_S3B 0 VALUE {
+  if(V(DELAYEDPOSFAULT_S3B)+V(DELAYEDNEGFAULT_S3B)>0.1,1,0)     }

E_ABM8         FINALFAULTLOGIC_S4B 0 VALUE {
+  if(V(DELAYEDPOSFAULT_S4B)+V(DELAYEDNEGFAULT_S4B)>0.1,1,0)     }



X_U117 FaultLogicOutputPos_S1A FaultLogicOutputNeg_S1A VSS VDD DA Drain_Fault_Event_Sx
X_U127 FaultLogicOutputPos_S2A FaultLogicOutputNeg_S2A VSS VDD DA Drain_Fault_Event_Sx
X_U137 FaultLogicOutputPos_S3A FaultLogicOutputNeg_S3A VSS VDD DA Drain_Fault_Event_Sx
X_U147 FaultLogicOutputPos_S4A FaultLogicOutputNeg_S4A VSS VDD DA Drain_Fault_Event_Sx
X_U157 FaultLogicOutputPos_S1B FaultLogicOutputNeg_S1B VSS VDD DB Drain_Fault_Event_Sx
X_U167 FaultLogicOutputPos_S2B FaultLogicOutputNeg_S2B VSS VDD DB Drain_Fault_Event_Sx
X_U177 FaultLogicOutputPos_S3B FaultLogicOutputNeg_S3B VSS VDD DB Drain_Fault_Event_Sx
X_U187 FaultLogicOutputPos_S4B FaultLogicOutputNeg_S4B VSS VDD DB Drain_Fault_Event_Sx


*Internal Pulldown Resistors

R_R101 A0 0 4e6
R_R102 A1 0 4e6
R_R104 EN 0 4e6


.ENDS TMUX7309F



.subckt SCHEMATIC1_FaultSwitch_Sx 1 2 3 4  
S_FaultSwitch_Sx         3 4 1 2 _FaultSwitch_Sx
RS_FaultSwitch_Sx         1 2 1G
.MODEL         _FaultSwitch_Sx VSWITCH Roff=1e9 Ron=.001 Voff=0.67 Von=0.37
.ends SCHEMATIC1_FaultSwitch_Sx





.SUBCKT Fault_Detect_Block_Sx Sx VDD VSS PFx NFx Fx

E_ABM10         NFx 0 VALUE { if( V(Sx)<V(VSS)-0.7,1,0)    }
E_ABM8         PFx 0 VALUE { if( V(Sx)>V(VDD)+0.7,1,0)    }
E_ABM9         Fx 0 VALUE { if( V(PFx) + V(NFx) > 0V ,1,0)    }

.ENDS Fault_Detect_Block_Sx




.SUBCKT OverVoltageLeakageS Sx_IN VSS VDD Fx GND

* Leakage table IOverOFF
EIOverOFF NIOverOFF GND TABLE {V(VDD,VSS)} = 
+ (0,100e-9)
+ (12,100e-9)
+ (15,100e-9)
+ (20,100e-9)
+ (36,100e-9)
*
* Leakage table IoverON
EIOverON NIOverON GND TABLE {V(VDD,VSS)} = 
+ (0,0.000135)
+ (10, 0.000110)
+ (15,0.000110)
*
GLEAK Sx_IN GND VALUE = { IF (V(Fx, GND)>0.63,V(NIOverON),V(NIOverOFF)) }
*

.ENDS OverVoltageLeakageS


.SUBCKT OverVoltageLeakageD D_IN VSS VDD Fx GND

* Leakage table IOverOFF
EIOverOFF NIOverOFF GND TABLE {V(VDD,VSS)} = 
+ (0,0.000001)
+ (12,0.000001)
+ (15,0.000001)
+ (20,0.000001)
+ (36,0.000001)
*
* Leakage table IoverON
EIOverON NIOverON GND TABLE {V(VDD,VSS)} = 
+ (0,0.000135)
+ (10, 0.000110)
+ (15,0.000110)
*
GLEAK D_IN GND VALUE = { IF (V(Fx, GND)>0.63,V(NIOverON),V(NIOverOFF)) }
*

.ENDS OverVoltageLeakageD





.SUBCKT Control_and_Fault_Logic_S1A A0 A1 EN Fault_Logic_Output Fault_Logic


X_A0_ST    A0 0 A0_LOGIC_INPUT N177965 FaultLogicBlockAlone_A0_ST
V_V3         N177965 0 1
R_R19         0 A0_LOGIC_INPUT  1k TC=0,0 
 
X_A1_ST    A1 0 A1_LOGIC_INPUT N177981 FaultLogicBlockAlone_A1_ST 
V_V4         N177981 0 1
R_R16         0 A1_LOGIC_INPUT  1k TC=0,0 


X_A3_ST    EN 0 EN_LOGIC N178013 FaultLogicBlockAlone_A3_ST
V_V6         N178013 0 1
R_R18         0 EN_LOGIC  1k TC=0,0 

E_ABM11         STATE_LOGIC 0 VALUE {
+  if(V(A1_LOGIC_INPUT)+V(A0_LOGIC_INPUT)<0.5,1,0)    }

 
E_ABM13         FAULT_LOGIC_OUTPUT 0 VALUE {
+  if(V(EN_LOGIC)+V(FAULT_LOGIC)+V(STATE_LOGIC)>2.5,1,0)    }




.ENDS Control_and_Fault_Logic_S1A




.SUBCKT Control_and_Fault_Logic_S2A A0 A1 EN Fault_Logic_Output Fault_Logic

X_A0_ST    A0 0 A0_LOGIC_INPUT N177965 FaultLogicBlockAlone_A0_ST
V_V3         N177965 0 1
R_R19         0 A0_LOGIC_INPUT  1k TC=0,0 
 
X_A1_ST    A1 0 A1_LOGIC_INPUT N177981 FaultLogicBlockAlone_A1_ST 
V_V4         N177981 0 1
R_R16         0 A1_LOGIC_INPUT  1k TC=0,0 


X_A3_ST    EN 0 EN_LOGIC N178013 FaultLogicBlockAlone_A3_ST
V_V6         N178013 0 1
R_R18         0 EN_LOGIC  1k TC=0,0 

E_ABM11         STATE_LOGIC 0 VALUE {
+  if(-V(A1_LOGIC_INPUT)+V(A0_LOGIC_INPUT)>0.5,1,0)    }
 
E_ABM13         FAULT_LOGIC_OUTPUT 0 VALUE {
+  if(V(EN_LOGIC)+V(FAULT_LOGIC)+V(STATE_LOGIC)>2.5,1,0)    }


.ENDS Control_and_Fault_Logic_S2A





.SUBCKT Control_and_Fault_Logic_S3A A0 A1 EN Fault_Logic_Output Fault_Logic

X_A0_ST    A0 0 A0_LOGIC_INPUT N177965 FaultLogicBlockAlone_A0_ST
V_V3         N177965 0 1
R_R19         0 A0_LOGIC_INPUT  1k TC=0,0 
 
X_A1_ST    A1 0 A1_LOGIC_INPUT N177981 FaultLogicBlockAlone_A1_ST 
V_V4         N177981 0 1
R_R16         0 A1_LOGIC_INPUT  1k TC=0,0 

X_A3_ST    EN 0 EN_LOGIC N178013 FaultLogicBlockAlone_A3_ST
V_V6         N178013 0 1
R_R18         0 EN_LOGIC  1k TC=0,0 



E_ABM11         STATE_LOGIC 0 VALUE {
+  if(V(A1_LOGIC_INPUT)-V(A0_LOGIC_INPUT)>0.5,1,0)    }
 
E_ABM13         FAULT_LOGIC_OUTPUT 0 VALUE {
+  if(V(EN_LOGIC)+V(FAULT_LOGIC)+V(STATE_LOGIC)>2.5,1,0)    }



.ENDS Control_and_Fault_Logic_S3A





.SUBCKT Control_and_Fault_Logic_S4A A0 A1 EN Fault_Logic_Output Fault_Logic

X_A0_ST    A0 0 A0_LOGIC_INPUT N177965 FaultLogicBlockAlone_A0_ST
V_V3         N177965 0 1
R_R19         0 A0_LOGIC_INPUT  1k TC=0,0 
 
X_A1_ST    A1 0 A1_LOGIC_INPUT N177981 FaultLogicBlockAlone_A1_ST 
V_V4         N177981 0 1
R_R16         0 A1_LOGIC_INPUT  1k TC=0,0 

X_A3_ST    EN 0 EN_LOGIC N178013 FaultLogicBlockAlone_A3_ST
V_V6         N178013 0 1
R_R18         0 EN_LOGIC  1k TC=0,0 

E_ABM11         STATE_LOGIC 0 VALUE {
+  if(V(A1_LOGIC_INPUT)*V(A0_LOGIC_INPUT)>.5,1,0)    }
 
E_ABM13         FAULT_LOGIC_OUTPUT 0 VALUE {
+  if(V(EN_LOGIC)+V(FAULT_LOGIC)+V(STATE_LOGIC)>2.5,1,0)    }

.ENDS Control_and_Fault_Logic_S4A






.SUBCKT Control_and_Fault_Logic_S1B A0 A1 EN Fault_Logic_Output Fault_Logic

X_A0_ST    A0 0 A0_LOGIC_INPUT N177965 FaultLogicBlockAlone_A0_ST
V_V3         N177965 0 1
R_R19         0 A0_LOGIC_INPUT  1k TC=0,0 
 
X_A1_ST    A1 0 A1_LOGIC_INPUT N177981 FaultLogicBlockAlone_A1_ST 
V_V4         N177981 0 1
R_R16         0 A1_LOGIC_INPUT  1k TC=0,0 

X_A3_ST    EN 0 EN_LOGIC N178013 FaultLogicBlockAlone_A3_ST
V_V6         N178013 0 1
R_R18         0 EN_LOGIC  1k TC=0,0 

E_ABM11         STATE_LOGIC 0 VALUE {
+  if(V(A1_LOGIC_INPUT)+V(A0_LOGIC_INPUT)<0.5,1,0)    }
 
E_ABM13         FAULT_LOGIC_OUTPUT 0 VALUE {
+  if(V(EN_LOGIC)+V(FAULT_LOGIC)+V(STATE_LOGIC)>2.5,1,0)    }


.ENDS Control_and_Fault_Logic_S1B






.SUBCKT Control_and_Fault_Logic_S2B A0 A1 EN Fault_Logic_Output Fault_Logic

X_A0_ST    A0 0 A0_LOGIC_INPUT N177965 FaultLogicBlockAlone_A0_ST
V_V3         N177965 0 1
R_R19         0 A0_LOGIC_INPUT  1k TC=0,0 
 
X_A1_ST    A1 0 A1_LOGIC_INPUT N177981 FaultLogicBlockAlone_A1_ST 
V_V4         N177981 0 1
R_R16         0 A1_LOGIC_INPUT  1k TC=0,0 

X_A3_ST    EN 0 EN_LOGIC N178013 FaultLogicBlockAlone_A3_ST
V_V6         N178013 0 1
R_R18         0 EN_LOGIC  1k TC=0,0 

E_ABM11         STATE_LOGIC 0 VALUE {
+  if(-V(A1_LOGIC_INPUT)+V(A0_LOGIC_INPUT)>0.5,1,0)    }
 
E_ABM13         FAULT_LOGIC_OUTPUT 0 VALUE {
+  if(V(EN_LOGIC)+V(FAULT_LOGIC)+V(STATE_LOGIC)>2.5,1,0)    }



.ENDS Control_and_Fault_Logic_S2B






.SUBCKT Control_and_Fault_Logic_S3B A0 A1 EN Fault_Logic_Output Fault_Logic

X_A0_ST    A0 0 A0_LOGIC_INPUT N177965 FaultLogicBlockAlone_A0_ST
V_V3         N177965 0 1
R_R19         0 A0_LOGIC_INPUT  1k TC=0,0 
 
X_A1_ST    A1 0 A1_LOGIC_INPUT N177981 FaultLogicBlockAlone_A1_ST 
V_V4         N177981 0 1
R_R16         0 A1_LOGIC_INPUT  1k TC=0,0 

X_A3_ST    EN 0 EN_LOGIC N178013 FaultLogicBlockAlone_A3_ST
V_V6         N178013 0 1
R_R18         0 EN_LOGIC  1k TC=0,0 

E_ABM11         STATE_LOGIC 0 VALUE {
+  if(V(A1_LOGIC_INPUT)-V(A0_LOGIC_INPUT)>0.5,1,0)    }
 
E_ABM13         FAULT_LOGIC_OUTPUT 0 VALUE {
+  if(V(EN_LOGIC)+V(FAULT_LOGIC)+V(STATE_LOGIC)>2.5,1,0)    }

.ENDS Control_and_Fault_Logic_S3B






.SUBCKT Control_and_Fault_Logic_S4B A0 A1 EN Fault_Logic_Output Fault_Logic

X_A0_ST    A0 0 A0_LOGIC_INPUT N177965 FaultLogicBlockAlone_A0_ST
V_V3         N177965 0 1
R_R19         0 A0_LOGIC_INPUT  1k TC=0,0 
 
X_A1_ST    A1 0 A1_LOGIC_INPUT N177981 FaultLogicBlockAlone_A1_ST 
V_V4         N177981 0 1
R_R16         0 A1_LOGIC_INPUT  1k TC=0,0 


X_A3_ST    EN 0 EN_LOGIC N178013 FaultLogicBlockAlone_A3_ST
V_V6         N178013 0 1
R_R18         0 EN_LOGIC  1k TC=0,0 

E_ABM11         STATE_LOGIC 0 VALUE {
+  if(V(A1_LOGIC_INPUT)*V(A0_LOGIC_INPUT)>0.5,1,0)    }

E_ABM13         FAULT_LOGIC_OUTPUT 0 VALUE {
+  if(V(EN_LOGIC)+V(FAULT_LOGIC)+V(STATE_LOGIC)>2.5,1,0)    }


.ENDS Control_and_Fault_Logic_S4B




.subckt FaultLogicBlockAlone_A0_ST 1 2 3 4  
S_A0_ST         3 4 1 2 _A0_ST
RS_A0_ST         1 2 1G
.MODEL         _A0_ST VSWITCH Roff=1e9 Ron=0.001 VH=.25 VT=1.05 TD=0
.ends FaultLogicBlockAlone_A0_ST

.subckt FaultLogicBlockAlone_A1_ST 1 2 3 4  
S_A1_ST         3 4 1 2 _A1_ST
RS_A1_ST         1 2 1G
.MODEL         _A1_ST VSWITCH Roff=1e9 Ron=0.001 VH=.25 VT=1.05 TD=0
.ends FaultLogicBlockAlone_A1_ST


.subckt FaultLogicBlockAlone_A3_ST 1 2 3 4  
S_A3_ST         3 4 1 2 _A3_ST
RS_A3_ST         1 2 1G
.MODEL         _A3_ST VSWITCH Roff=1e9 Ron=0.001 VH=.25 VT=1.05 TD=0
.ends FaultLogicBlockAlone_A3_ST


.SUBCKT Delay_pos IN VSS GND OUT
*
*Response positive
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VSS,GND)} =
+(-22,255.0)
+ (-12,255.0)
+ (-0.1,255.0)
+ (0,1250.0)

R1 OUT_ONDLY IN 10e9

GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-9
EROFF NROFF GND TABLE {V(VSS,GND)} =
*Recovery Positive
+(-22,280.0)
+ (-12, 280.0)
+ (-0.1,280.0)
+ (0,280.0)

R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS Delay_pos
*



.SUBCKT Delay_neg IN VSS GND OUT
*
*Response Negative
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VSS,GND)} =
+(-22,5.0)
+ (-12,150.0)
+ (-0.1,150.0)
+ (0,2300.0)

R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-9
EROFF NROFF GND TABLE {V(VSS,GND)} =
*Recovery Negative
+(-22,650.0)
+ (-12,650.0)
+ (-0.1,650.0)
+ (0,535.0)


R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS Delay_neg
*


.SUBCKT Drain_Fault_Event_Sx PFx NFx VSS VDD D


R_R22         PFX PFXDRRISE  40 TC=0,0 
C_C3         0 PFXDRRISE  1n  TC=0,0 
X_PFxRiseSwitch    PFX 0 PFXDRRISE PFXSWITCHCONTROLINPUT
+  SCHEMATIC1_PFxRiseSwitch 

R_R23         PFX PFXDRFALL  800 TC=0,0 
C_C4         0 PFXDRFALL  1.5n  TC=0,0 
X_PFxFallSwtich    PFX 0 PFXDRFALL PFXSWITCHCONTROLINPUT
+  SCHEMATIC1_PFxFallSwtich 

*R_R27         VSS_40KIN VSS  40k TC=0,0 
*X_DRVDDSwitch    PFXSWITCHCONTROLINPUT 0 VDD_40KIN D SCHEMATIC1_DRVDDSwitch 
X_DRVDDSwitch    PFXSWITCHCONTROLINPUT 0 VDD D SCHEMATIC1_DRVDDSwitch


R_R26         NFX NFXDRRISE  40 TC=0,0
C_C6         0 NFXDRRISE  1n  TC=0,0 
X_NFxRiseSwitch    NFX 0 NFXDRRISE NFXSWITCHCONTROLINPUT
+  SCHEMATIC1_NFxRiseSwitch 


R_R28         NFX NFXDRFALL  800 TC=0,0
C_C7         0 NFXDRFALL  1.5n  TC=0,0

X_NFxFallSwitch    NFX 0 NFXDRFALL NFXSWITCHCONTROLINPUT
+  SCHEMATIC1_NFxFallSwitch 

*R_R25         VDD_40KIN VDD  40k TC=0,0
*X_DRVSSSwitch    NFXSWITCHCONTROLINPUT 0 VSS_40KIN D SCHEMATIC1_DRVSSSwitch
X_DRVSSSwitch    NFXSWITCHCONTROLINPUT 0 VSS CAP_WIRE2 SCHEMATIC1_DRVSSSwitch 


X_Cap_Neg_Time    NFX 0 D CAP_WIRE SCHEMATIC2_Cap_Neg_Time 
C_C8         CAP_WIRE2 0  40p  TC=0,0 
R_Damp       CAP_WIRE CAP_WIRE2 500 


.ENDS Drain_Fault_Event_Sx


.subckt SCHEMATIC2_Cap_Neg_Time 1 2 3 4  
S_Cap_Neg_Time         3 4 1 2 _Cap_Neg_Time
RS_Cap_Neg_Time         1 2 1G
.MODEL         _Cap_Neg_Time VSWITCH Roff=100e9 Ron=0.001 Voff=0.1 Von=0.9
.ends SCHEMATIC2_Cap_Neg_Time



.subckt SCHEMATIC1_NFxRiseSwitch 1 2 3 4  
S_NFxRiseSwitch         3 4 1 2 _NFxRiseSwitch
RS_NFxRiseSwitch         1 2 1G
.MODEL         _NFxRiseSwitch VSWITCH Roff=100e9 Ron=0.001 Voff=0.37 Von=0.63
.ends SCHEMATIC1_NFxRiseSwitch

.subckt SCHEMATIC1_DRVDDSwitch 1 2 3 4  
S_DRVDDSwitch         3 4 1 2 _DRVDDSwitch
RS_DRVDDSwitch         1 2 1G
.MODEL         _DRVDDSwitch VSWITCH Roff=1000e9 Ron=50k Voff=0.37 Von=0.63
.ends SCHEMATIC1_DRVDDSwitch

.subckt SCHEMATIC1_NFxFallSwitch 1 2 3 4  
S_NFxFallSwitch         3 4 1 2 _NFxFallSwitch
RS_NFxFallSwitch         1 2 1G
.MODEL         _NFxFallSwitch VSWITCH Roff=100e9 Ron=0.001 Voff=0.63 Von=0.37
.ends SCHEMATIC1_NFxFallSwitch

.subckt SCHEMATIC1_PFxRiseSwitch 1 2 3 4  
S_PFxRiseSwitch         3 4 1 2 _PFxRiseSwitch
RS_PFxRiseSwitch         1 2 1G
.MODEL         _PFxRiseSwitch VSWITCH Roff=100e9 Ron=0.001 Voff=0.37 Von=0.63
.ends SCHEMATIC1_PFxRiseSwitch

.subckt SCHEMATIC1_PFxFallSwtich 1 2 3 4  
S_PFxFallSwtich         3 4 1 2 _PFxFallSwtich
RS_PFxFallSwtich         1 2 1G
.MODEL         _PFxFallSwtich VSWITCH Roff=100e9 Ron=0.001 Voff=0.63 Von=0.37
.ends SCHEMATIC1_PFxFallSwtich

.subckt SCHEMATIC1_DRVSSSwitch 1 2 3 4  
S_DRVSSSwitch         3 4 1 2 _DRVSSSwitch
RS_DRVSSSwitch         1 2 1G
.MODEL         _DRVSSSwitch VSWITCH Roff=1000e9 Ron=40k Voff=0.37 Von=0.63
.ends SCHEMATIC1_DRVSSSwitch





























.SUBCKT TMUX7309F_IN A0 EN VSS S1A_IN S2A_IN S3A_IN S4A_IN DA DB S4B_IN S3B_IN S2B_IN S1B_IN VDD GND A1 
*Supply currents
X_U1    VSS GND I_VSS
X_U2    VDD GND I_VDD
*I/O diodes
X_U3    VSS S1A_IN ESD_diode
X_U4    S1A_IN VDD ESD_diode
X_U5    VSS S2A_IN ESD_diode
X_U6    S2A_IN VDD ESD_diode
X_U7    VSS S3A_IN ESD_diode
X_U8    S3A_IN VDD ESD_diode
X_U9    VSS S4A_IN ESD_diode
X_U10    S4A_IN VDD ESD_diode
X_U11    VSS S1B_IN ESD_diode
X_U12    S1B_IN VDD ESD_diode
X_U13    VSS S2B_IN ESD_diode
X_U14    S2B_IN VDD ESD_diode
X_U15    VSS S3B_IN ESD_diode
X_U16    S3B_IN VDD ESD_diode
X_U17    VSS S4B_IN ESD_diode
X_U18    S4B_IN VDD ESD_diode
X_U19    VSS DA ESD_diode
X_U20    DA VDD ESD_diode
X_U21    VSS DB ESD_diode
X_U22    DB VDD ESD_diode
*Comparators (VIH/VIL)
X_U23    VDD_L VDD VDD_NL GND COMPARATOR_VDD
X_U24    EN_L EN EN_NL GND COMPARATOR_EN
X_U25    A0_L A0 A0_NL GND COMPARATOR_A0
X_U26    A1_L A1 A1_NL GND COMPARATOR_A1
*Input delays
X_U27    VDD_NL VDD GND VDD_L Delay_VDD
R1    VDD_L  GND    50
X_U28    EN_NL VDD GND EN_L Delay_EN
R2    EN_L  GND    50
X_U29    A1_NL VDD GND A1_L Delay_A1
R3    A1_L  GND    50
X_U30    A0_NL VDD GND A0_L Delay_A0
R4    A0_L  GND    50
*LOGIC
X_U31    VDD_L EN_L A1_L A0_L SW_S1A_L SW_S2A_L SW_S3A_L SW_S4A_L SW_S1B_L SW_S2B_L SW_S3B_L SW_S4B_L SW_DA_L SW_DB_L SW_S1ADA_L SW_S2ADA_L SW_S3ADA_L SW_S4ADA_L SW_S1BDB_L SW_S2BDB_L SW_S3BDB_L SW_S4BDB_L GND LOGIC
*Output delays
X_U32    SW_S1A_L VDD GND SW_S1A Delay_SW_S1A
X_U33    SW_S2A_L VDD GND SW_S2A Delay_SW_S2A
X_U34    SW_S3A_L VDD GND SW_S3A Delay_SW_S3A
X_U35    SW_S4A_L VDD GND SW_S4A Delay_SW_S4A
X_U36    SW_S1B_L VDD GND SW_S1B Delay_SW_S1B
X_U37    SW_S2B_L VDD GND SW_S2B Delay_SW_S2B
X_U38    SW_S3B_L VDD GND SW_S3B Delay_SW_S3B
X_U39    SW_S4B_L VDD GND SW_S4B Delay_SW_S4B
X_U40    SW_DA_L VDD GND SW_DA Delay_SW_DA
X_U41    SW_DB_L VDD GND SW_DB Delay_SW_DB
X_U42    SW_S1ADA_L VDD GND SW_S1ADA Delay_SW_S1ADA
X_U43    SW_S2ADA_L VDD GND SW_S2ADA Delay_SW_S2ADA
X_U44    SW_S3ADA_L VDD GND SW_S3ADA Delay_SW_S3ADA
X_U45    SW_S4ADA_L VDD GND SW_S4ADA Delay_SW_S4ADA
X_U46    SW_S1BDB_L VDD GND SW_S1BDB Delay_SW_S1BDB
X_U47    SW_S2BDB_L VDD GND SW_S2BDB Delay_SW_S2BDB
X_U48    SW_S3BDB_L VDD GND SW_S3BDB Delay_SW_S3BDB
X_U49    SW_S4BDB_L VDD GND SW_S4BDB Delay_SW_S4BDB
*Switch I/O (COFF, CON, ION, IOFF, BW)
X_U50    DA VSS VDD SW_DA GND DA_IO
X_U51    S1A_IN VSS VDD SW_S1A_IN GND S1A_IN_IO
X_U52    S2A_IN VSS VDD SW_S2A_IN GND S2A_IN_IO
X_U53    S3A_IN VSS VDD SW_S3A_IN GND S3A_IN_IO
X_U54    S4A_IN VSS VDD SW_S4A_IN GND S4A_IN_IO
X_U55    S1B_IN VSS VDD SW_S1B_IN GND S1B_IN_IO
X_U56    S2B_IN VSS VDD SW_S2B_IN GND S2B_IN_IO
X_U57    S3B_IN VSS VDD SW_S3B_IN GND S3B_IN_IO
X_U58    S4B_IN VSS VDD SW_S4B_IN GND S4B_IN_IO
X_U59    DB VSS VDD SW_DB GND DB_IO
*Switch blocks (Ron, OISO)
X_U60    S1A_IN DA VSS VDD GND SW_S1ADA SWITCH_S1A_IN
X_U61    S2A_IN DA VSS VDD GND SW_S2ADA SWITCH_S2A_IN
X_U62    S3A_IN DA VSS VDD GND SW_S3ADA SWITCH_S3A_IN
X_U63    S4A_IN DA VSS VDD GND SW_S4ADA SWITCH_S4A_IN
X_U64    S1B_IN DB VSS VDD GND SW_S1BDB SWITCH_S1B_IN
X_U65    S2B_IN DB VSS VDD GND SW_S2BDB SWITCH_S2B_IN
X_U66    S3B_IN DB VSS VDD GND SW_S3BDB SWITCH_S3B_IN
X_U67    S4B_IN DB VSS VDD GND SW_S4BDB SWITCH_S4B_IN
*switch to switch capacitance (XTALK)
C1 S1A_IN S2A_IN 2.830219583509837e-14
C2 S1A_IN S3A_IN 2.830219583509837e-14
C3 S1A_IN S4A_IN 2.830219583509837e-14
C4 S1A_IN S4B_IN 2.830219583509837e-14
C5 S1A_IN S3B_IN 2.830219583509837e-14
C6 S1A_IN S2B_IN 2.830219583509837e-14
C7 S1A_IN S1B_IN 2.830219583509837e-14
C8 S2A_IN S3A_IN 2.830219583509837e-14
C9 S2A_IN S4A_IN 2.830219583509837e-14
C10 S2A_IN S4B_IN 2.830219583509837e-14
C11 S2A_IN S3B_IN 2.830219583509837e-14
C12 S2A_IN S2B_IN 2.830219583509837e-14
C13 S2A_IN S1B_IN 2.830219583509837e-14
C14 S3A_IN S4A_IN 2.830219583509837e-14
C15 S3A_IN S4B_IN 2.830219583509837e-14
C16 S3A_IN S3B_IN 2.830219583509837e-14
C17 S3A_IN S2B_IN 2.830219583509837e-14
C18 S3A_IN S1B_IN 2.830219583509837e-14
C19 S4A_IN S4B_IN 2.830219583509837e-14
C20 S4A_IN S3B_IN 2.830219583509837e-14
C21 S4A_IN S2B_IN 2.830219583509837e-14
C22 S4A_IN S1B_IN 2.830219583509837e-14
C23 S4B_IN S3B_IN 2.830219583509837e-14
C24 S4B_IN S2B_IN 2.830219583509837e-14
C25 S4B_IN S1B_IN 2.830219583509837e-14
C26 S3B_IN S2B_IN 2.830219583509837e-14
C27 S3B_IN S1B_IN 2.830219583509837e-14
C28 S2B_IN S1B_IN 2.830219583509837e-14
C29 DA DB 2.830219583509837e-14
*Charge injection blocks (Qc)
X_U68    S1A_IN VSS VDD DA SW_S1ADA GND VSS QC_S1A_IN
X_U69    S2A_IN VSS VDD DA SW_S2ADA GND VSS QC_S2A_IN
X_U70    S3A_IN VSS VDD DA SW_S3ADA GND VSS QC_S3A_IN
X_U71    S4A_IN VSS VDD DA SW_S4ADA GND VSS QC_S4A_IN
X_U72    S1B_IN VSS VDD DB SW_S1BDB GND VSS QC_S1B_IN
X_U73    S2B_IN VSS VDD DB SW_S2BDB GND VSS QC_S2B_IN
X_U74    S3B_IN VSS VDD DB SW_S3BDB GND VSS QC_S3B_IN
X_U75    S4B_IN VSS VDD DB SW_S4BDB GND VSS QC_S4B_IN
.ENDS TMUX7309F_IN 
*$
*These circuits add a series diode that simulates an ESD diode from IN (-) to OUT (+)
*This diode will not cause a failure when IN > OUT but may show a large increase in current consumption 
*$
.SUBCKT ESD_Diode IN OUT
*
.MODEL DCLAMP D(IS=1E-15 IBV=1E-13 ISR = 1E-15)
D1 IN OUT DCLAMP
*
.ENDS
*$
*These circuits add a parallel current source/sink to simulate supply current consumption, based on the table
*
.SUBCKT I_VDD VDD GND
*
EI_VDD NVDD GND TABLE {V(VDD,GND)} = 
+ (0.0,0.00025)
+ (8.0,0.00025)
+ (10.8,0.00025)
+ (12.0,0.00025)
+ (15.0,0.00025)
+ (20.0,0.00025)
+ (36.0,0.00025)
+ (44.0,0.00025)
*
GVDD VDD GND VALUE = {(V(NVDD)+1p)}
*
.ENDS
.SUBCKT I_VSS VSS GND
*
EI_VSS NVSS GND TABLE {V(VSS,GND)} = 
+ (-20.0,-0.00015)
+ (-13.5,-0.00015)
+ (-0.1 , -0.00015)
*
GVSS VSS GND VALUE = {(V(NVSS)+1p)}
*
.ENDS
*
*These circuits compare the current state and the input voltage to find the new state
*if the current state is on (1) then we will change states if VIN goes below VIL (1 to 0)
*if the current state is on (0) then we will change states if VIN goes above VIH (0 to 1)
.SUBCKT COMPARATOR_VDD  STATE VIN NEWSTATE GND
EVIH VIH GND TABLE {V(VIN,GND)} = 
+ (0,0)
+ (4.399,0)
+ (4.4,1)
EVIL VIL GND TABLE {V(VIN,GND)} = 
+ (0,0)
+ (4.199,0)
+ (4.2,1)
EOUT NEWSTATE GND VALUE = { IF (V(STATE, GND)>0.63, V(VIH,GND), V(VIL,GND) ) }
.ENDS
*$
.SUBCKT COMPARATOR_EN  STATE VIN NEWSTATE GND
EVIH VIH GND TABLE {V(VIN,GND)} = 
+ (0,0)
+ (1.2990000000000002,0)
+ (1.3,1)
EVIL VIL GND TABLE {V(VIN,GND)} = 
+ (0,0)
+ (0.799,0)
+ (0.8,1)
EOUT NEWSTATE GND VALUE = { IF (V(STATE, GND)>0.63, V(VIH,GND), V(VIL,GND) ) }
.ENDS
*$
.SUBCKT COMPARATOR_A0  STATE VIN NEWSTATE GND
EVIH VIH GND TABLE {V(VIN,GND)} = 
+ (0,0)
+ (1.2990000000000002,0)
+ (1.3,1)
EVIL VIL GND TABLE {V(VIN,GND)} = 
+ (0,0)
+ (0.799,0)
+ (0.8,1)
EOUT NEWSTATE GND VALUE = { IF (V(STATE, GND)>0.63, V(VIH,GND), V(VIL,GND) ) }
.ENDS
*$
.SUBCKT COMPARATOR_A1  STATE VIN NEWSTATE GND
EVIH VIH GND TABLE {V(VIN,GND)} = 
+ (0,0)
+ (1.2990000000000002,0)
+ (1.3,1)
EVIL VIL GND TABLE {V(VIN,GND)} = 
+ (0,0)
+ (0.799,0)
+ (0.8,1)
EOUT NEWSTATE GND VALUE = { IF (V(STATE, GND)>0.63, V(VIH,GND), V(VIL,GND) ) }
.ENDS
*$
*These circuits handle all the logic for the device
*this does NOT handle timing delays or VIH VIL, all signals here are 1/0 logic
*VDD EN A1 A0    SW_S1A SW_S2A SW_S3A SW_S4A SW_S1B SW_S2B SW_S3B SW_S4B SW_DA SW_DB SW_S1ADA SW_S2ADA SW_S3ADA SW_S4ADA SW_S1BDB SW_S2BDB SW_S3BDB SW_S4BDB 
*1   1  0  0     1      0      0      0      1      0      0      0      1     1     1        0        0        0        1        0        0        0        
*1   1  0  1     0      1      0      0      0      1      0      0      1     1     0        1        0        0        0        1        0        0        
*1   1  1  0     0      0      1      0      0      0      1      0      1     1     0        0        1        0        0        0        1        0        
*1   1  1  1     0      0      0      1      0      0      0      1      1     1     0        0        0        1        0        0        0        1        
*$
.SUBCKT LOGIC  LVDD LEN LA1 LA0 SW_S1A SW_S2A SW_S3A SW_S4A SW_S1B SW_S2B SW_S3B SW_S4B SW_DA SW_DB SW_S1ADA SW_S2ADA SW_S3ADA SW_S4ADA SW_S1BDB SW_S2BDB SW_S3BDB SW_S4BDB GND
*
*convert analog RC to 1/0 digital
ELVDD_DIG LVDD_DIG GND VALUE = {IF (V(LVDD,GND)>0.63,1, 0) }
ELEN_DIG LEN_DIG GND VALUE = {IF (V(LEN,GND)>0.63,1, 0) }
ELA1_DIG LA1_DIG GND VALUE = {IF (V(LA1,GND)>0.63,1, 0) }
ELA0_DIG LA0_DIG GND VALUE = {IF (V(LA0,GND)>0.63,1, 0) }
*Create an inverse of all inputs in case they need to be used
ELVDD_DIGN LVDD_DIGN GND VALUE = { 1 - V(LVDD_DIG, GND)}
ELEN_DIGN LEN_DIGN GND VALUE = { 1 - V(LEN_DIG, GND)}
ELA1_DIGN LA1_DIGN GND VALUE = { 1 - V(LA1_DIG, GND)}
ELA0_DIGN LA0_DIGN GND VALUE = { 1 - V(LA0_DIG, GND)}
*
*Determine output states and rectify outputs
ELSW_S1A LSW_S1A GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIGN,GND) * V(LA0_DIGN,GND) }
ESW_S1A SW_S1A GND VALUE = { IF (V(LSW_S1A, GND)>0.5,1,0) }
ELSW_S2A LSW_S2A GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIGN,GND) * V(LA0_DIG,GND) }
ESW_S2A SW_S2A GND VALUE = { IF (V(LSW_S2A, GND)>0.5,1,0) }
ELSW_S3A LSW_S3A GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIG,GND) * V(LA0_DIGN,GND) }
ESW_S3A SW_S3A GND VALUE = { IF (V(LSW_S3A, GND)>0.5,1,0) }
ELSW_S4A LSW_S4A GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIG,GND) * V(LA0_DIG,GND) }
ESW_S4A SW_S4A GND VALUE = { IF (V(LSW_S4A, GND)>0.5,1,0) }
ELSW_S1B LSW_S1B GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIGN,GND) * V(LA0_DIGN,GND) }
ESW_S1B SW_S1B GND VALUE = { IF (V(LSW_S1B, GND)>0.5,1,0) }
ELSW_S2B LSW_S2B GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIGN,GND) * V(LA0_DIG,GND) }
ESW_S2B SW_S2B GND VALUE = { IF (V(LSW_S2B, GND)>0.5,1,0) }
ELSW_S3B LSW_S3B GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIG,GND) * V(LA0_DIGN,GND) }
ESW_S3B SW_S3B GND VALUE = { IF (V(LSW_S3B, GND)>0.5,1,0) }
ELSW_S4B LSW_S4B GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIG,GND) * V(LA0_DIG,GND) }
ESW_S4B SW_S4B GND VALUE = { IF (V(LSW_S4B, GND)>0.5,1,0) }
ELSW_DA LSW_DA GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIGN,GND) * V(LA0_DIGN,GND) + V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIGN,GND) * V(LA0_DIG,GND) + V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIG,GND) 
+ * V(LA0_DIGN,GND) + V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIG,GND) * V(LA0_DIG,GND) }
ESW_DA SW_DA GND VALUE = { IF (V(LSW_DA, GND)>0.5,1,0) }
ELSW_DB LSW_DB GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIGN,GND) * V(LA0_DIGN,GND) + V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIGN,GND) * V(LA0_DIG,GND) + V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIG,GND) 
+ * V(LA0_DIGN,GND) + V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIG,GND) * V(LA0_DIG,GND) }
ESW_DB SW_DB GND VALUE = { IF (V(LSW_DB, GND)>0.5,1,0) }
ELSW_S1ADA LSW_S1ADA GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIGN,GND) * V(LA0_DIGN,GND) }
ESW_S1ADA SW_S1ADA GND VALUE = { IF (V(LSW_S1ADA, GND)>0.5,1,0) }
ELSW_S2ADA LSW_S2ADA GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIGN,GND) * V(LA0_DIG,GND) }
ESW_S2ADA SW_S2ADA GND VALUE = { IF (V(LSW_S2ADA, GND)>0.5,1,0) }
ELSW_S3ADA LSW_S3ADA GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIG,GND) * V(LA0_DIGN,GND) }
ESW_S3ADA SW_S3ADA GND VALUE = { IF (V(LSW_S3ADA, GND)>0.5,1,0) }
ELSW_S4ADA LSW_S4ADA GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIG,GND) * V(LA0_DIG,GND) }
ESW_S4ADA SW_S4ADA GND VALUE = { IF (V(LSW_S4ADA, GND)>0.5,1,0) }
ELSW_S1BDB LSW_S1BDB GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIGN,GND) * V(LA0_DIGN,GND) }
ESW_S1BDB SW_S1BDB GND VALUE = { IF (V(LSW_S1BDB, GND)>0.5,1,0) }
ELSW_S2BDB LSW_S2BDB GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIGN,GND) * V(LA0_DIG,GND) }
ESW_S2BDB SW_S2BDB GND VALUE = { IF (V(LSW_S2BDB, GND)>0.5,1,0) }
ELSW_S3BDB LSW_S3BDB GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIG,GND) * V(LA0_DIGN,GND) }
ESW_S3BDB SW_S3BDB GND VALUE = { IF (V(LSW_S3BDB, GND)>0.5,1,0) }
ELSW_S4BDB LSW_S4BDB GND VALUE = { V(LVDD_DIG,GND) * V(LEN_DIG,GND) * V(LA1_DIG,GND) * V(LA0_DIG,GND) }
ESW_S4BDB SW_S4BDB GND VALUE = { IF (V(LSW_S4BDB, GND)>0.5,1,0) }
*
.ENDS
*$
*These circuits add a RC delay in series to the In and OUT signal
*split delays depending on if IN is going high to low or low to high
*if IN is going high to low, the R needs to be adjusted by /0.46471 to convert the 0.37% time to 0.63%
*TON_TOFF_SUPPLY
.SUBCKT Delay_VDD  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (5,1000.0)
+ (44,1000.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (5,430.3792)
+ (44,430.3792)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TON_TOFF_EN
.SUBCKT Delay_EN  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,150.0)
+ (15,150.0)
+ (20,150.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,258.2275)
+ (15,158.2275)
+ (20,158.2275)
+ (36, 270)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TTRAN
.SUBCKT Delay_A0  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,160.0)
+ (15,160.0)
+ (20,160.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,258.2275)
+ (15,158.2275)
+ (20,158.2275)
+ (36, 270)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TTRAN
.SUBCKT Delay_A1  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,160.0)
+ (15,160.0)
+ (20,160.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,258.2275)
+ (15,158.2275)
+ (20,158.2275)
+ (36, 270)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TTRAN
.SUBCKT Delay_A2  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,160.0)
+ (15,160.0)
+ (20,160.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,258.2275)
+ (15,158.2275)
+ (20,158.2275)
+ (36, 270)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S1A  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S2A  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S3A  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S4A  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S1B  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S2B  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S3B  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S4B  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*BUFFER
.SUBCKT Delay_SW_DA  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,10.0)
+ (15,10.0)
+ (20,10.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S1ADA  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S2ADA  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S3ADA  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S4ADA  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S1BDB  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S2BDB  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S3BDB  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*TBBM
.SUBCKT Delay_SW_S4BDB  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,120.0)
+ (15,120.0)
+ (20,120.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
*BUFFER
.SUBCKT Delay_SW_DB  IN VDD GND OUT
*
C1 OUT_ONDLY GND 1e-09
ERON NRON GND TABLE {V(VDD,GND)} =
+ (12,10.0)
+ (15,10.0)
+ (20,10.0)
R1 OUT_ONDLY IN 10e9
GRON OUT_ONDLY IN VALUE = {V(OUT_ONDLY,IN)/V(NRON)}
*
EOUT_ONREC OUT_ONREC GND VALUE = { V(OUT_ONDLY, GND)}
*
S_ON OUT_ONREC OUT IN GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
C2 OUT_OFFDLY GND 1e-09
EROFF NROFF GND TABLE {V(VDD,GND)} =
+ (12,21.519)
+ (15,21.519)
+ (20,21.519)
R2 OUT_OFFDLY IN 10e9
GROFF OUT_OFFDLY IN VALUE = {V(OUT_OFFDLY,IN)/V(NROFF)}
*
EOUT_OFFREC OUT_OFFREC GND VALUE = { V(OUT_OFFDLY, GND)}
*
S_OFF OUT_OFFREC OUT IN GND  SWOFF
.MODEL SWOFF VSWITCH Roff=1e9 Ron=0.001 Voff=0.63V Von=0.37V
*
.ENDS
*
.SUBCKT SWITCH_S1A_IN SX DX VSS VDD GND SWx
*
.PARAM Ron_offset = -0.04
*
*Cap S to D
**see documentation for CTHRU calculation based on OISO
CTHRU SX DX 0.7p
*
*ONOFF switches
S_ON DX DX_SWON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
*Ron tables
ERON_P8p0m0 NRON_P8p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.94)
+ (1.0,180.8)
+ (5.0,181.9)
+ (6.0,226.7)
+ (6.3,285.45)
+ (6.5,376.85)
+ (7.0,845.52)
+ (8.0,1845.12)
ERON_P10p8m0 NRON_P10p8m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.73)
+ (1.0,182.83)
+ (8.0,182.83)
+ (8.5,200.48)
+ (9.0,259.57)
+ (9.5,547.61)
+ (10.8,1845.1)
ERON_P12p0m0 NRON_P12p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.76)
+ (1.0,180.87)
+ (9.0,181.9)
+ (9.5,190.6)
+ (10.0,226.57)
+ (10.5,376.78)
+ (11.0,845.48)
+ (12.0,1845.1)
ERON_P15p0m15 NRON_P15p0m15 GND TABLE {V(SX,GND)} = 
+ (-15.0,179.7)
+ (-14.0,181.18)
+ (12.0,181.7)
+ (12.5,190.57)
+ (13.0,226.56)
+ (13.5,376.79)
+ (14.0,845.5)
+ (15.0,1851.1)
ERON_P20p0m20 NRON_P20p0m20 GND TABLE {V(SX,GND)} = 
+ (-20.0,171.58)
+ (-18.5,180.91)
+ (17.0,181.0)
+ (17.6,194.27)
+ (18.0,225.87)
+ (18.5,376.03)
+ (20.0,1844.2)
ERON_P36p0m0 NRON_P36p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.2)
+ (0.5,179.8)
+ (33.0,180.7)
+ (34.0,225.25)
+ (34.5,375.7)
+ (35.5,1344.24)
+ (36.0,1844.06)
ERON_P44p0m0 NRON_P44p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.25)
+ (0.5,179.7)
+ (41.0,180.2)
+ (41.7,199.126)
+ (42.5,380.48)
+ (43.5,1354.12)
+ (44.0,1853.99)
*
*RON modeled as a current depending on S to D voltage
GRON SX DX_SWON VALUE = {V(SX,DX_SWON)/(
+ IF (V(SWx,GND) < 0.63, 50e15,
+ IF (V(VSS,GND) >= 0 ,
+ IF (V(VDD,GND) <= 8.0, V(NRON_P8p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 10.8, V(NRON_P10p8m0) - Ron_offset,
+ IF (V(VDD,GND) <= 12.0, V(NRON_P12p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 36.0, V(NRON_P36p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 44.0, V(NRON_P44p0m0) - Ron_offset,
+ 50e15 ))))),
+ IF (V(VDD,GND) <= 15.0, V(NRON_P15p0m15) - Ron_offset,
+ IF (V(VDD,GND) <= 20.0, V(NRON_P20p0m20) - Ron_offset,
+ 50e15 ))

+ ))) }
*
.ENDS
*$
.SUBCKT SWITCH_S2A_IN SX DX VSS VDD GND SWx
*
.PARAM Ron_offset = 0.63
*
*Cap S to D
**see documentation for CTHRU calculation based on OISO
CTHRU SX DX 0.7p
*
*ONOFF switches
S_ON DX DX_SWON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
*Ron tables
ERON_P8p0m0 NRON_P8p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.94)
+ (1.0,180.8)
+ (5.0,181.9)
+ (6.0,226.7)
+ (6.3,285.45)
+ (6.5,376.85)
+ (7.0,845.52)
+ (8.0,1845.12)
ERON_P10p8m0 NRON_P10p8m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.73)
+ (1.0,182.83)
+ (8.0,182.83)
+ (8.5,200.48)
+ (9.0,259.57)
+ (9.5,547.61)
+ (10.8,1845.1)
ERON_P12p0m0 NRON_P12p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.76)
+ (1.0,180.87)
+ (9.0,181.9)
+ (9.5,190.6)
+ (10.0,226.57)
+ (10.5,376.78)
+ (11.0,845.48)
+ (12.0,1845.1)
ERON_P15p0m15 NRON_P15p0m15 GND TABLE {V(SX,GND)} = 
+ (-15.0,179.7)
+ (-14.0,181.18)
+ (12.0,181.7)
+ (12.5,190.57)
+ (13.0,226.56)
+ (13.5,376.79)
+ (14.0,845.5)
+ (15.0,1851.1)
ERON_P20p0m20 NRON_P20p0m20 GND TABLE {V(SX,GND)} = 
+ (-20.0,171.58)
+ (-18.5,180.91)
+ (17.0,181.0)
+ (17.6,194.27)
+ (18.0,225.87)
+ (18.5,376.03)
+ (20.0,1844.2)
ERON_P36p0m0 NRON_P36p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.2)
+ (0.5,179.8)
+ (33.0,180.7)
+ (34.0,225.25)
+ (34.5,375.7)
+ (35.5,1344.24)
+ (36.0,1844.06)
ERON_P44p0m0 NRON_P44p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.25)
+ (0.5,179.7)
+ (41.0,180.2)
+ (41.7,199.126)
+ (42.5,380.48)
+ (43.5,1354.12)
+ (44.0,1853.99)
*
*RON modeled as a current depending on S to D voltage
GRON SX DX_SWON VALUE = {V(SX,DX_SWON)/(
+ IF (V(SWx,GND) < 0.63, 50e15,
+ IF (V(VSS,GND) >= 0 ,
+ IF (V(VDD,GND) <= 8.0, V(NRON_P8p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 10.8, V(NRON_P10p8m0) - Ron_offset,
+ IF (V(VDD,GND) <= 12.0, V(NRON_P12p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 36.0, V(NRON_P36p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 44.0, V(NRON_P44p0m0) - Ron_offset,
+ 50e15 ))))),
+ IF (V(VDD,GND) <= 15.0, V(NRON_P15p0m15) - Ron_offset,
+ IF (V(VDD,GND) <= 20.0, V(NRON_P20p0m20) - Ron_offset,
+ 50e15 ))

+ ))) }
*
.ENDS
*$
.SUBCKT SWITCH_S3A_IN SX DX VSS VDD GND SWx
*
.PARAM Ron_offset = 0.3
*
*Cap S to D
**see documentation for CTHRU calculation based on OISO
CTHRU SX DX 0.7p
*
*ONOFF switches
S_ON DX DX_SWON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
*Ron tables
ERON_P8p0m0 NRON_P8p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.94)
+ (1.0,180.8)
+ (5.0,181.9)
+ (6.0,226.7)
+ (6.3,285.45)
+ (6.5,376.85)
+ (7.0,845.52)
+ (8.0,1845.12)
ERON_P10p8m0 NRON_P10p8m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.73)
+ (1.0,182.83)
+ (8.0,182.83)
+ (8.5,200.48)
+ (9.0,259.57)
+ (9.5,547.61)
+ (10.8,1845.1)
ERON_P12p0m0 NRON_P12p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.76)
+ (1.0,180.87)
+ (9.0,181.9)
+ (9.5,190.6)
+ (10.0,226.57)
+ (10.5,376.78)
+ (11.0,845.48)
+ (12.0,1845.1)
ERON_P15p0m15 NRON_P15p0m15 GND TABLE {V(SX,GND)} = 
+ (-15.0,179.7)
+ (-14.0,181.18)
+ (12.0,181.7)
+ (12.5,190.57)
+ (13.0,226.56)
+ (13.5,376.79)
+ (14.0,845.5)
+ (15.0,1851.1)
ERON_P20p0m20 NRON_P20p0m20 GND TABLE {V(SX,GND)} = 
+ (-20.0,171.58)
+ (-18.5,180.91)
+ (17.0,181.0)
+ (17.6,194.27)
+ (18.0,225.87)
+ (18.5,376.03)
+ (20.0,1844.2)
ERON_P36p0m0 NRON_P36p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.2)
+ (0.5,179.8)
+ (33.0,180.7)
+ (34.0,225.25)
+ (34.5,375.7)
+ (35.5,1344.24)
+ (36.0,1844.06)
ERON_P44p0m0 NRON_P44p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.25)
+ (0.5,179.7)
+ (41.0,180.2)
+ (41.7,199.126)
+ (42.5,380.48)
+ (43.5,1354.12)
+ (44.0,1853.99)
*
*RON modeled as a current depending on S to D voltage
GRON SX DX_SWON VALUE = {V(SX,DX_SWON)/(
+ IF (V(SWx,GND) < 0.63, 50e15,
+ IF (V(VSS,GND) >= 0 ,
+ IF (V(VDD,GND) <= 8.0, V(NRON_P8p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 10.8, V(NRON_P10p8m0) - Ron_offset,
+ IF (V(VDD,GND) <= 12.0, V(NRON_P12p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 36.0, V(NRON_P36p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 44.0, V(NRON_P44p0m0) - Ron_offset,
+ 50e15 ))))),
+ IF (V(VDD,GND) <= 15.0, V(NRON_P15p0m15) - Ron_offset,
+ IF (V(VDD,GND) <= 20.0, V(NRON_P20p0m20) - Ron_offset,
+ 50e15 ))

+ ))) }
*
.ENDS
*$
.SUBCKT SWITCH_S4A_IN SX DX VSS VDD GND SWx
*
.PARAM Ron_offset = 0.97
*
*Cap S to D
**see documentation for CTHRU calculation based on OISO
CTHRU SX DX 0.7p
*
*ONOFF switches
S_ON DX DX_SWON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
*Ron tables
ERON_P8p0m0 NRON_P8p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.94)
+ (1.0,180.8)
+ (5.0,181.9)
+ (6.0,226.7)
+ (6.3,285.45)
+ (6.5,376.85)
+ (7.0,845.52)
+ (8.0,1845.12)
ERON_P10p8m0 NRON_P10p8m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.73)
+ (1.0,182.83)
+ (8.0,182.83)
+ (8.5,200.48)
+ (9.0,259.57)
+ (9.5,547.61)
+ (10.8,1845.1)
ERON_P12p0m0 NRON_P12p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.76)
+ (1.0,180.87)
+ (9.0,181.9)
+ (9.5,190.6)
+ (10.0,226.57)
+ (10.5,376.78)
+ (11.0,845.48)
+ (12.0,1845.1)
ERON_P15p0m15 NRON_P15p0m15 GND TABLE {V(SX,GND)} = 
+ (-15.0,179.7)
+ (-14.0,181.18)
+ (12.0,181.7)
+ (12.5,190.57)
+ (13.0,226.56)
+ (13.5,376.79)
+ (14.0,845.5)
+ (15.0,1851.1)
ERON_P20p0m20 NRON_P20p0m20 GND TABLE {V(SX,GND)} = 
+ (-20.0,171.58)
+ (-18.5,180.91)
+ (17.0,181.0)
+ (17.6,194.27)
+ (18.0,225.87)
+ (18.5,376.03)
+ (20.0,1844.2)
ERON_P36p0m0 NRON_P36p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.2)
+ (0.5,179.8)
+ (33.0,180.7)
+ (34.0,225.25)
+ (34.5,375.7)
+ (35.5,1344.24)
+ (36.0,1844.06)
ERON_P44p0m0 NRON_P44p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.25)
+ (0.5,179.7)
+ (41.0,180.2)
+ (41.7,199.126)
+ (42.5,380.48)
+ (43.5,1354.12)
+ (44.0,1853.99)
*
*RON modeled as a current depending on S to D voltage
GRON SX DX_SWON VALUE = {V(SX,DX_SWON)/(
+ IF (V(SWx,GND) < 0.63, 50e15,
+ IF (V(VSS,GND) >= 0 ,
+ IF (V(VDD,GND) <= 8.0, V(NRON_P8p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 10.8, V(NRON_P10p8m0) - Ron_offset,
+ IF (V(VDD,GND) <= 12.0, V(NRON_P12p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 36.0, V(NRON_P36p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 44.0, V(NRON_P44p0m0) - Ron_offset,
+ 50e15 ))))),
+ IF (V(VDD,GND) <= 15.0, V(NRON_P15p0m15) - Ron_offset,
+ IF (V(VDD,GND) <= 20.0, V(NRON_P20p0m20) - Ron_offset,
+ 50e15 ))

+ ))) }
*
.ENDS
*$
.SUBCKT SWITCH_S1B_IN SX DX VSS VDD GND SWx
*
.PARAM Ron_offset = -0.84
*
*Cap S to D
**see documentation for CTHRU calculation based on OISO
CTHRU SX DX 0.7p
*
*ONOFF switches
S_ON DX DX_SWON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
*Ron tables
ERON_P8p0m0 NRON_P8p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.94)
+ (1.0,180.8)
+ (5.0,181.9)
+ (6.0,226.7)
+ (6.3,285.45)
+ (6.5,376.85)
+ (7.0,845.52)
+ (8.0,1845.12)
ERON_P10p8m0 NRON_P10p8m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.73)
+ (1.0,182.83)
+ (8.0,182.83)
+ (8.5,200.48)
+ (9.0,259.57)
+ (9.5,547.61)
+ (10.8,1845.1)
ERON_P12p0m0 NRON_P12p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.76)
+ (1.0,180.87)
+ (9.0,181.9)
+ (9.5,190.6)
+ (10.0,226.57)
+ (10.5,376.78)
+ (11.0,845.48)
+ (12.0,1845.1)
ERON_P15p0m15 NRON_P15p0m15 GND TABLE {V(SX,GND)} = 
+ (-15.0,179.7)
+ (-14.0,181.18)
+ (12.0,181.7)
+ (12.5,190.57)
+ (13.0,226.56)
+ (13.5,376.79)
+ (14.0,845.5)
+ (15.0,1851.1)
ERON_P20p0m20 NRON_P20p0m20 GND TABLE {V(SX,GND)} = 
+ (-20.0,171.58)
+ (-18.5,180.91)
+ (17.0,181.0)
+ (17.6,194.27)
+ (18.0,225.87)
+ (18.5,376.03)
+ (20.0,1844.2)
ERON_P36p0m0 NRON_P36p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.2)
+ (0.5,179.8)
+ (33.0,180.7)
+ (34.0,225.25)
+ (34.5,375.7)
+ (35.5,1344.24)
+ (36.0,1844.06)
ERON_P44p0m0 NRON_P44p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.25)
+ (0.5,179.7)
+ (41.0,180.2)
+ (41.7,199.126)
+ (42.5,380.48)
+ (43.5,1354.12)
+ (44.0,1853.99)
*
*RON modeled as a current depending on S to D voltage
GRON SX DX_SWON VALUE = {V(SX,DX_SWON)/(
+ IF (V(SWx,GND) < 0.63, 50e15,
+ IF (V(VSS,GND) >= 0 ,
+ IF (V(VDD,GND) <= 8.0, V(NRON_P8p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 10.8, V(NRON_P10p8m0) - Ron_offset,
+ IF (V(VDD,GND) <= 12.0, V(NRON_P12p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 36.0, V(NRON_P36p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 44.0, V(NRON_P44p0m0) - Ron_offset,
+ 50e15 ))))),
+ IF (V(VDD,GND) <= 15.0, V(NRON_P15p0m15) - Ron_offset,
+ IF (V(VDD,GND) <= 20.0, V(NRON_P20p0m20) - Ron_offset,
+ 50e15 ))

+ ))) }
*
.ENDS
*$
.SUBCKT SWITCH_S2B_IN SX DX VSS VDD GND SWx
*
.PARAM Ron_offset = -0.98
*
*Cap S to D
**see documentation for CTHRU calculation based on OISO
CTHRU SX DX 0.7p
*
*ONOFF switches
S_ON DX DX_SWON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
*Ron tables
ERON_P8p0m0 NRON_P8p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.94)
+ (1.0,180.8)
+ (5.0,181.9)
+ (6.0,226.7)
+ (6.3,285.45)
+ (6.5,376.85)
+ (7.0,845.52)
+ (8.0,1845.12)
ERON_P10p8m0 NRON_P10p8m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.73)
+ (1.0,182.83)
+ (8.0,182.83)
+ (8.5,200.48)
+ (9.0,259.57)
+ (9.5,547.61)
+ (10.8,1845.1)
ERON_P12p0m0 NRON_P12p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.76)
+ (1.0,180.87)
+ (9.0,181.9)
+ (9.5,190.6)
+ (10.0,226.57)
+ (10.5,376.78)
+ (11.0,845.48)
+ (12.0,1845.1)
ERON_P15p0m15 NRON_P15p0m15 GND TABLE {V(SX,GND)} = 
+ (-15.0,179.7)
+ (-14.0,181.18)
+ (12.0,181.7)
+ (12.5,190.57)
+ (13.0,226.56)
+ (13.5,376.79)
+ (14.0,845.5)
+ (15.0,1851.1)
ERON_P20p0m20 NRON_P20p0m20 GND TABLE {V(SX,GND)} = 
+ (-20.0,171.58)
+ (-18.5,180.91)
+ (17.0,181.0)
+ (17.6,194.27)
+ (18.0,225.87)
+ (18.5,376.03)
+ (20.0,1844.2)
ERON_P36p0m0 NRON_P36p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.2)
+ (0.5,179.8)
+ (33.0,180.7)
+ (34.0,225.25)
+ (34.5,375.7)
+ (35.5,1344.24)
+ (36.0,1844.06)
ERON_P44p0m0 NRON_P44p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.25)
+ (0.5,179.7)
+ (41.0,180.2)
+ (41.7,199.126)
+ (42.5,380.48)
+ (43.5,1354.12)
+ (44.0,1853.99)
*
*RON modeled as a current depending on S to D voltage
GRON SX DX_SWON VALUE = {V(SX,DX_SWON)/(
+ IF (V(SWx,GND) < 0.63, 50e15,
+ IF (V(VSS,GND) >= 0 ,
+ IF (V(VDD,GND) <= 8.0, V(NRON_P8p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 10.8, V(NRON_P10p8m0) - Ron_offset,
+ IF (V(VDD,GND) <= 12.0, V(NRON_P12p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 36.0, V(NRON_P36p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 44.0, V(NRON_P44p0m0) - Ron_offset,
+ 50e15 ))))),
+ IF (V(VDD,GND) <= 15.0, V(NRON_P15p0m15) - Ron_offset,
+ IF (V(VDD,GND) <= 20.0, V(NRON_P20p0m20) - Ron_offset,
+ 50e15 ))

+ ))) }
*
.ENDS
*$
.SUBCKT SWITCH_S3B_IN SX DX VSS VDD GND SWx
*
.PARAM Ron_offset = -0.14
*
*Cap S to D
**see documentation for CTHRU calculation based on OISO
CTHRU SX DX 0.7p
*
*ONOFF switches
S_ON DX DX_SWON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
*Ron tables
ERON_P8p0m0 NRON_P8p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.94)
+ (1.0,180.8)
+ (5.0,181.9)
+ (6.0,226.7)
+ (6.3,285.45)
+ (6.5,376.85)
+ (7.0,845.52)
+ (8.0,1845.12)
ERON_P10p8m0 NRON_P10p8m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.73)
+ (1.0,182.83)
+ (8.0,182.83)
+ (8.5,200.48)
+ (9.0,259.57)
+ (9.5,547.61)
+ (10.8,1845.1)
ERON_P12p0m0 NRON_P12p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.76)
+ (1.0,180.87)
+ (9.0,181.9)
+ (9.5,190.6)
+ (10.0,226.57)
+ (10.5,376.78)
+ (11.0,845.48)
+ (12.0,1845.1)
ERON_P15p0m15 NRON_P15p0m15 GND TABLE {V(SX,GND)} = 
+ (-15.0,179.7)
+ (-14.0,181.18)
+ (12.0,181.7)
+ (12.5,190.57)
+ (13.0,226.56)
+ (13.5,376.79)
+ (14.0,845.5)
+ (15.0,1851.1)
ERON_P20p0m20 NRON_P20p0m20 GND TABLE {V(SX,GND)} = 
+ (-20.0,171.58)
+ (-18.5,180.91)
+ (17.0,181.0)
+ (17.6,194.27)
+ (18.0,225.87)
+ (18.5,376.03)
+ (20.0,1844.2)
ERON_P36p0m0 NRON_P36p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.2)
+ (0.5,179.8)
+ (33.0,180.7)
+ (34.0,225.25)
+ (34.5,375.7)
+ (35.5,1344.24)
+ (36.0,1844.06)
ERON_P44p0m0 NRON_P44p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.25)
+ (0.5,179.7)
+ (41.0,180.2)
+ (41.7,199.126)
+ (42.5,380.48)
+ (43.5,1354.12)
+ (44.0,1853.99)
*
*RON modeled as a current depending on S to D voltage
GRON SX DX_SWON VALUE = {V(SX,DX_SWON)/(
+ IF (V(SWx,GND) < 0.63, 50e15,
+ IF (V(VSS,GND) >= 0 ,
+ IF (V(VDD,GND) <= 8.0, V(NRON_P8p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 10.8, V(NRON_P10p8m0) - Ron_offset,
+ IF (V(VDD,GND) <= 12.0, V(NRON_P12p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 36.0, V(NRON_P36p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 44.0, V(NRON_P44p0m0) - Ron_offset,
+ 50e15 ))))),
+ IF (V(VDD,GND) <= 15.0, V(NRON_P15p0m15) - Ron_offset,
+ IF (V(VDD,GND) <= 20.0, V(NRON_P20p0m20) - Ron_offset,
+ 50e15 ))

+ ))) }
*
.ENDS
*$
.SUBCKT SWITCH_S4B_IN SX DX VSS VDD GND SWx
*
.PARAM Ron_offset = 1.5
*
*Cap S to D
**see documentation for CTHRU calculation based on OISO
CTHRU SX DX 0.7p
*
*ONOFF switches
S_ON DX DX_SWON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
*Ron tables
ERON_P8p0m0 NRON_P8p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.94)
+ (1.0,180.8)
+ (5.0,181.9)
+ (6.0,226.7)
+ (6.3,285.45)
+ (6.5,376.85)
+ (7.0,845.52)
+ (8.0,1845.12)
ERON_P10p8m0 NRON_P10p8m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.73)
+ (1.0,182.83)
+ (8.0,182.83)
+ (8.5,200.48)
+ (9.0,259.57)
+ (9.5,547.61)
+ (10.8,1845.1)
ERON_P12p0m0 NRON_P12p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,175.76)
+ (1.0,180.87)
+ (9.0,181.9)
+ (9.5,190.6)
+ (10.0,226.57)
+ (10.5,376.78)
+ (11.0,845.48)
+ (12.0,1845.1)
ERON_P15p0m15 NRON_P15p0m15 GND TABLE {V(SX,GND)} = 
+ (-15.0,179.7)
+ (-14.0,181.18)
+ (12.0,181.7)
+ (12.5,190.57)
+ (13.0,226.56)
+ (13.5,376.79)
+ (14.0,845.5)
+ (15.0,1851.1)
ERON_P20p0m20 NRON_P20p0m20 GND TABLE {V(SX,GND)} = 
+ (-20.0,171.58)
+ (-18.5,180.91)
+ (17.0,181.0)
+ (17.6,194.27)
+ (18.0,225.87)
+ (18.5,376.03)
+ (20.0,1844.2)
ERON_P36p0m0 NRON_P36p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.2)
+ (0.5,179.8)
+ (33.0,180.7)
+ (34.0,225.25)
+ (34.5,375.7)
+ (35.5,1344.24)
+ (36.0,1844.06)
ERON_P44p0m0 NRON_P44p0m0 GND TABLE {V(SX,GND)} = 
+ (0.0,171.25)
+ (0.5,179.7)
+ (41.0,180.2)
+ (41.7,199.126)
+ (42.5,380.48)
+ (43.5,1354.12)
+ (44.0,1853.99)
*
*RON modeled as a current depending on S to D voltage
GRON SX DX_SWON VALUE = {V(SX,DX_SWON)/(
+ IF (V(SWx,GND) < 0.63, 50e15,
+ IF (V(VSS,GND) >= 0 ,
+ IF (V(VDD,GND) <= 8.0, V(NRON_P8p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 10.8, V(NRON_P10p8m0) - Ron_offset,
+ IF (V(VDD,GND) <= 12.0, V(NRON_P12p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 36.0, V(NRON_P36p0m0) - Ron_offset,
+ IF (V(VDD,GND) <= 44.0, V(NRON_P44p0m0) - Ron_offset,
+ 50e15 ))))),
+ IF (V(VDD,GND) <= 15.0, V(NRON_P15p0m15) - Ron_offset,
+ IF (V(VDD,GND) <= 20.0, V(NRON_P20p0m20) - Ron_offset,
+ 50e15 ))

+ ))) }
*
.ENDS
*$
.SUBCKT QC_S1A_IN SX VSS VDD DX SWx GND LO
*
*C1 and C2 can be increased to increase the range of the Qc and EQC_V is a ratio (0% to 100%) 
*
C1 SX QC_mid 1.5pF
C2 DX QC_mid 1.5pF
EQC_VSW QC_VSW GND TABLE {V(SWx, GND)} = 
+(0,0)
+(0.37,0)
+(0.63, 1)
+(1, 1)
EQC_VS QC_VS GND TABLE {V(SX, GND)} = 
+ (0,58)
+ (6,58)
+ (22,28)
*
EQC_mid QC_mid LO_1 VALUE = { V(VDD, GND) * V(QC_VSW, GND) * V(QC_VS, GND)/100 }
RQC_mid LO_1 LO 50
*
.ENDS
*$
.SUBCKT QC_S2A_IN SX VSS VDD DX SWx GND LO
*
*C1 and C2 can be increased to increase the range of the Qc and EQC_V is a ratio (0% to 100%) 
*
C1 SX QC_mid 1.5pF
C2 DX QC_mid 1.5pF
EQC_VSW QC_VSW GND TABLE {V(SWx, GND)} = 
+(0,0)
+(0.37,0)
+(0.63, 1)
+(1, 1)
EQC_VS QC_VS GND TABLE {V(SX, GND)} = 
+ (0,58)
+ (6,58)
+ (22,58)
*
EQC_mid QC_mid LO_1 VALUE = { V(VDD, GND) * V(QC_VSW, GND) * V(QC_VS, GND)/100 }
RQC_mid LO_1 LO 50
*
.ENDS
*$
.SUBCKT QC_S3A_IN SX VSS VDD DX SWx GND LO
*
*C1 and C2 can be increased to increase the range of the Qc and EQC_V is a ratio (0% to 100%) 
*
C1 SX QC_mid 1.5pF
C2 DX QC_mid 1.5pF
EQC_VSW QC_VSW GND TABLE {V(SWx, GND)} = 
+(0,0)
+(0.37,0)
+(0.63, 1)
+(1, 1)
EQC_VS QC_VS GND TABLE {V(SX, GND)} = 
+ (0,58)
+ (6,58)
+ (22,58)
*
EQC_mid QC_mid LO_1 VALUE = { V(VDD, GND) * V(QC_VSW, GND) * V(QC_VS, GND)/100 }
RQC_mid LO_1 LO 50
*
.ENDS
*$
.SUBCKT QC_S4A_IN SX VSS VDD DX SWx GND LO
*
*C1 and C2 can be increased to increase the range of the Qc and EQC_V is a ratio (0% to 100%) 
*
C1 SX QC_mid 1.5pF
C2 DX QC_mid 1.5pF
EQC_VSW QC_VSW GND TABLE {V(SWx, GND)} = 
+(0,0)
+(0.37,0)
+(0.63, 1)
+(1, 1)
EQC_VS QC_VS GND TABLE {V(SX, GND)} = 
+ (0,58)
+ (6,58)
+ (22,58)
*
EQC_mid QC_mid LO_1 VALUE = { V(VDD, GND) * V(QC_VSW, GND) * V(QC_VS, GND)/100 }
RQC_mid LO_1 LO 50
*
.ENDS
*$
.SUBCKT QC_S1B_IN SX VSS VDD DX SWx GND LO
*
*C1 and C2 can be increased to increase the range of the Qc and EQC_V is a ratio (0% to 100%) 
*
C1 SX QC_mid 1.5pF
C2 DX QC_mid 1.5pF
EQC_VSW QC_VSW GND TABLE {V(SWx, GND)} = 
+(0,0)
+(0.37,0)
+(0.63, 1)
+(1, 1)
EQC_VS QC_VS GND TABLE {V(SX, GND)} = 
+ (0,58)
+ (6,58)
+ (22,58)
*
EQC_mid QC_mid LO_1 VALUE = { V(VDD, GND) * V(QC_VSW, GND) * V(QC_VS, GND)/100 }
RQC_mid LO_1 LO 50
*
.ENDS
*$
.SUBCKT QC_S2B_IN SX VSS VDD DX SWx GND LO
*
*C1 and C2 can be increased to increase the range of the Qc and EQC_V is a ratio (0% to 100%) 
*
C1 SX QC_mid 1.5pF
C2 DX QC_mid 1.5pF
EQC_VSW QC_VSW GND TABLE {V(SWx, GND)} = 
+(0,0)
+(0.37,0)
+(0.63, 1)
+(1, 1)
EQC_VS QC_VS GND TABLE {V(SX, GND)} = 
+ (0,58)
+ (6,58)
+ (22,58)
*
EQC_mid QC_mid LO_1 VALUE = { V(VDD, GND) * V(QC_VSW, GND) * V(QC_VS, GND)/100 }
RQC_mid LO_1 LO 50
*
.ENDS
*$
.SUBCKT QC_S3B_IN SX VSS VDD DX SWx GND LO
*
*C1 and C2 can be increased to increase the range of the Qc and EQC_V is a ratio (0% to 100%) 
*
C1 SX QC_mid 1.5pF
C2 DX QC_mid 1.5pF
EQC_VSW QC_VSW GND TABLE {V(SWx, GND)} = 
+(0,0)
+(0.37,0)
+(0.63, 1)
+(1, 1)
EQC_VS QC_VS GND TABLE {V(SX, GND)} = 
+ (0,58)
+ (6,58)
+ (22,58)
*
EQC_mid QC_mid LO_1 VALUE = { V(VDD, GND) * V(QC_VSW, GND) * V(QC_VS, GND)/100 }
RQC_mid LO_1 LO 50
*
.ENDS
*$
.SUBCKT QC_S4B_IN SX VSS VDD DX SWx GND LO
*
*C1 and C2 can be increased to increase the range of the Qc and EQC_V is a ratio (0% to 100%) 
*
C1 SX QC_mid 1.5pF
C2 DX QC_mid 1.5pF
EQC_VSW QC_VSW GND TABLE {V(SWx, GND)} = 
+(0,0)
+(0.37,0)
+(0.63, 1)
+(1, 1)
EQC_VS QC_VS GND TABLE {V(SX, GND)} = 
+ (0,58)
+ (6,58)
+ (22,58)
*
EQC_mid QC_mid LO_1 VALUE = { V(VDD, GND) * V(QC_VSW, GND) * V(QC_VS, GND)/100 }
RQC_mid LO_1 LO 50
*
.ENDS
*$
.SUBCKT DA_IO IN VSS VDD SWx GND
*
*static cap to gnd (COFF)
**see documentation for COFF calculation based on OISO
COFF IN GND 1.405732130158047p
*
*Cap IN to GND additional cap when ON
**see documentation for CON calculation based on BW
CON_2 IN_CAPON GND 2.5p
S_ON IN IN_CAPON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
* Leakage table IOFF
EIOFF NIOFF GND TABLE {V(VDD,VSS)} = 
+ (0,-1e-14)
+ (12,1e-10)
+ (15,1e-10)
+ (20,1e-10)
+ (36,1e-10)
*
* Leakage table ION
EION NION GND TABLE {V(VDD,VSS)} = 
+ (0,-1e-14)
+ (10,3e-11)
+ (15,3e-11)
*
GLEAK IN GND VALUE = { IF (V(SWx, GND)>0.63,V(NION),V(NIOFF)) }
*
.ENDS
*$
.SUBCKT S1A_IN_IO IN VSS VDD SWx GND
*
*static cap to gnd (COFF)
**see documentation for COFF calculation based on OISO
COFF IN GND 1.405732130158047p
*
*Cap IN to GND additional cap when ON
**see documentation for CON calculation based on BW
CON_2 IN_CAPON GND 2.5p
S_ON IN IN_CAPON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
* Leakage table IOFF
EIOFF NIOFF GND TABLE {V(VDD,VSS)} = 
+ (0,-1e-14)
+ (12,1e-10)
+ (15,1e-10)
+ (20,1e-10)
+ (36,1e-10)
*
* Leakage table ION
EION NION GND TABLE {V(VDD,VSS)} = 
+ (0,3e-11)
+ (10,3e-11)
+ (15,3e-11)
*
GLEAK IN GND VALUE = { IF (V(SWx, GND)>0.63,V(NION),V(NIOFF)) }
*
.ENDS
*$
.SUBCKT S2A_IN_IO IN VSS VDD SWx GND
*
*static cap to gnd (COFF)
**see documentation for COFF calculation based on OISO
COFF IN GND 1.405732130158047p
*
*Cap IN to GND additional cap when ON
**see documentation for CON calculation based on BW
CON_2 IN_CAPON GND 2.5p
S_ON IN IN_CAPON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
* Leakage table IOFF
EIOFF NIOFF GND TABLE {V(VDD,VSS)} = 
+ (0,-1e-14)
+ (12,1e-10)
+ (15,1e-10)
+ (20,1e-10)
+ (36,1e-10)
*
* Leakage table ION
EION NION GND TABLE {V(VDD,VSS)} = 
+ (0,3e-11)
+ (10,3e-11)
+ (15,3e-11)
*
GLEAK IN GND VALUE = { IF (V(SWx, GND)>0.63,V(NION),V(NIOFF)) }
*
.ENDS
*$
.SUBCKT S3A_IN_IO IN VSS VDD SWx GND
*
*static cap to gnd (COFF)
**see documentation for COFF calculation based on OISO
COFF IN GND 1.405732130158047p
*
*Cap IN to GND additional cap when ON
**see documentation for CON calculation based on BW
CON_2 IN_CAPON GND 2.5p
S_ON IN IN_CAPON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
* Leakage table IOFF
EIOFF NIOFF GND TABLE {V(VDD,VSS)} = 
+ (0,-1e-14)
+ (12,1e-10)
+ (15,1e-10)
+ (20,1e-10)
+ (36,1e-10)
*
* Leakage table ION
EION NION GND TABLE {V(VDD,VSS)} = 
+ (0,3e-11)
+ (10,3e-11)
+ (15,3e-11)
*
GLEAK IN GND VALUE = { IF (V(SWx, GND)>0.63,V(NION),V(NIOFF)) }
*
.ENDS
*$
.SUBCKT S4A_IN_IO IN VSS VDD SWx GND
*
*static cap to gnd (COFF)
**see documentation for COFF calculation based on OISO
COFF IN GND 1.405732130158047p
*
*Cap IN to GND additional cap when ON
**see documentation for CON calculation based on BW
CON_2 IN_CAPON GND 2.5p
S_ON IN IN_CAPON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
* Leakage table IOFF
EIOFF NIOFF GND TABLE {V(VDD,VSS)} = 
+ (0,-1e-14)
+ (12,1e-10)
+ (15,1e-10)
+ (20,1e-10)
+ (36,1e-10)
*
* Leakage table ION
EION NION GND TABLE {V(VDD,VSS)} = 
+ (0,3e-11)
+ (10,3e-11)
+ (15,3e-11)
*
GLEAK IN GND VALUE = { IF (V(SWx, GND)>0.63,V(NION),V(NIOFF)) }
*
.ENDS
*$
.SUBCKT S1B_IN_IO IN VSS VDD SWx GND
*
*static cap to gnd (COFF)
**see documentation for COFF calculation based on OISO
COFF IN GND 1p
*11.405732130158047p
*
*Cap IN to GND additional cap when ON
**see documentation for CON calculation based on BW
CON_2 IN_CAPON GND 2.5p
S_ON IN IN_CAPON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
* Leakage table IOFF
EIOFF NIOFF GND TABLE {V(VDD,VSS)} = 
+ (0,-1e-14)
+ (12,1e-10)
+ (15,1e-10)
+ (20,1e-10)
+ (36,1e-10)
*
* Leakage table ION
EION NION GND TABLE {V(VDD,VSS)} = 
+ (0,3e-11)
+ (10,3e-11)
+ (15,3e-11)
*
GLEAK IN GND VALUE = { IF (V(SWx, GND)>0.63,V(NION),V(NIOFF)) }
*
.ENDS
*$
.SUBCKT S2B_IN_IO IN VSS VDD SWx GND
*
*static cap to gnd (COFF)
**see documentation for COFF calculation based on OISO
COFF IN GND 1.405732130158047p
*
*Cap IN to GND additional cap when ON
**see documentation for CON calculation based on BW
CON_2 IN_CAPON GND 2.5p
S_ON IN IN_CAPON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
* Leakage table IOFF
EIOFF NIOFF GND TABLE {V(VDD,VSS)} = 
+ (0,-1e-14)
+ (12,1e-10)
+ (15,1e-10)
+ (20,1e-10)
+ (36,1e-10)
*
* Leakage table ION
EION NION GND TABLE {V(VDD,VSS)} = 
+ (0,3e-11)
+ (10,3e-11)
+ (15,3e-11)
*
GLEAK IN GND VALUE = { IF (V(SWx, GND)>0.63,V(NION),V(NIOFF)) }
*
.ENDS
*$
.SUBCKT S3B_IN_IO IN VSS VDD SWx GND
*
*static cap to gnd (COFF)
**see documentation for COFF calculation based on OISO
COFF IN GND 1p
*11.405732130158047p
*
*Cap IN to GND additional cap when ON
**see documentation for CON calculation based on BW
CON_2 IN_CAPON GND 2.5p
S_ON IN IN_CAPON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
* Leakage table IOFF
EIOFF NIOFF GND TABLE {V(VDD,VSS)} = 
+ (0,-1e-14)
+ (12,1e-10)
+ (15,1e-10)
+ (20,1e-10)
+ (36,1e-10)
*
* Leakage table ION
EION NION GND TABLE {V(VDD,VSS)} = 
+ (0,3e-11)
+ (10,3e-11)
+ (15,3e-11)
*
GLEAK IN GND VALUE = { IF (V(SWx, GND)>0.63,V(NION),V(NIOFF)) }
*
.ENDS
*$
.SUBCKT S4B_IN_IO IN VSS VDD SWx GND
*
*static cap to gnd (COFF)
**see documentation for COFF calculation based on OISO
COFF IN GND 6.937154753438698p
*
*Cap IN to GND additional cap when ON
**see documentation for CON calculation based on BW
CON_2 IN_CAPON GND 2.5p
S_ON IN IN_CAPON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
* Leakage table IOFF
EIOFF NIOFF GND TABLE {V(VDD,VSS)} = 
+ (0,-1e-14)
+ (12,1e-10)
+ (15,1e-10)
+ (20,1e-10)
+ (36,1e-10)
*
* Leakage table ION
EION NION GND TABLE {V(VDD,VSS)} = 
+ (0,3e-11)
+ (10,3e-11)
+ (15,3e-11)
*
GLEAK IN GND VALUE = { IF (V(SWx, GND)>0.63,V(NION),V(NIOFF)) }
*
.ENDS
*$
.SUBCKT DB_IO IN VSS VDD SWx GND
*
*static cap to gnd (COFF)
**see documentation for COFF calculation based on OISO
COFF IN GND 6.937154753438698p
*
*Cap IN to GND additional cap when ON
**see documentation for CON calculation based on BW
CON_2 IN_CAPON GND 1p
S_ON IN IN_CAPON SWx GND  SWON
.MODEL SWON VSWITCH Roff=1e9 Ron=0.001 Voff=0.37V Von=0.63V
*
* Leakage table IOFF
EIOFF NIOFF GND TABLE {V(VDD,VSS)} = 
+ (0,-1e-14)
+ (12,1e-10)
+ (15,1e-10)
+ (20,1e-10)
+ (36,1e-10)
*
* Leakage table ION
EION NION GND TABLE {V(VDD,VSS)} = 
+ (0,-1e-14)
+ (10,3e-11)
+ (15,3e-11)
*
GLEAK IN GND VALUE = { IF (V(SWx, GND)>0.63,V(NION),V(NIOFF)) }
*
.ENDS
*$
