rm(list = ls(all = TRUE))
mypath = "~/Documents/ALANizer"
files_ls <- list.files(path=mypath,pattern="*csv")
files_df <- lapply(files_ls,function(x) {read.csv(file=paste(mypath,files_ls[1],sep=""),header=T,sep=",")})
all_data <- do.call(rbind,lapply(files_ls,function(file) {
read.csv(paste(mypath,file,sep=""))
}))
summary(all_data)
mins <- sapply(mins,as.POSIXct(mins,tz="PDT",origin="1970-01-01 00:00.00 UTC"))
rm(list = ls(all = TRUE))
library(ggplot2)
library(data.table)
mydir = "~/Documents/ALANizer"
get_filenames <- function(site) {
dir_name <- paste("site", formatC(site,width=2,format="d",flag="0"), sep = "")
mypath <- paste(mydir, dir_name, sep = "/")
all_files <- list.files(path = mypath,pattern = "*CSV")
all_files <- lapply(all_files,function(x) gsub("(.CSV)","",as.character(x)))
all_dates <- lapply(all_files,function(x) as.POSIXct(x,format="%m-%d-%H",tz="UTC"))
for.setattr <- function(all_dates)
for (i in seq_along(all_dates))
setattr(all_dates[[i]], name = "tzone", value = "Canada/Pacific")
for.setattr(all_dates)
return(all_dates)
}
get_filenames(2)
# want to run get_filenames on integers 1 thru 12
filenames <- lapply(data.frame(rbind(1:12)),get_filenames)
# get individual column lengths
index <- sapply(filenames,length)
# need to pad columns with NAs such that dates are aligned...
# create sequence starting at minimum value in filenames
any_na <- function(x) any(is.na(x))
all_na <- function(x) all(is.na(x))
anyna <- sapply(filenames,any_na)
list_min <- function(x) min(unlist(x),na.rm=TRUE)
list_max <- function(x) max(unlist(x),na.rm=TRUE)
mins <- sapply(filenames,list_min)
mins <- sapply(mins,as.POSIXct(mins,tz="PDT",origin="1970-01-01 00:00.00 UTC"))
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC")
mins <- sapply(mins,to_posix)
mins
print(mins)
as.POSIXct(x=mins[1],tz="PDT",origin="1970-01-01 00:00.00 UTC")
sapply(mins,to_posix)
any_na <- function(x) any(is.na(x))
all_na <- function(x) all(is.na(x))
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC")
anyna <- sapply(filenames,any_na)
list_min <- function(x) min(unlist(x),na.rm=TRUE)
list_max <- function(x) max(unlist(x),na.rm=TRUE)
mins <- sapply(filenames,list_min)
mins <- sapply(mins,to_posix)
is.numeric.POSIXt(mins[1])
rm(list = ls(all = TRUE))
library(ggplot2)
library(data.table)
mydir = "~/Documents/ALANizer"
get_filenames <- function(site) {
dir_name <- paste("site", formatC(site,width=2,format="d",flag="0"), sep = "")
mypath <- paste(mydir, dir_name, sep = "/")
all_files <- list.files(path = mypath,pattern = "*CSV")
all_files <- lapply(all_files,function(x) gsub("(.CSV)","",as.character(x)))
all_dates <- lapply(all_files,function(x) as.POSIXct(x,format="%m-%d-%H",tz="UTC"))
for.setattr <- function(all_dates)
for (i in seq_along(all_dates))
setattr(all_dates[[i]], name = "tzone", value = "Canada/Pacific")
for.setattr(all_dates)
return(all_dates)
}
get_filenames(2)
# want to run get_filenames on integers 1 thru 12
filenames <- lapply(data.frame(rbind(1:12)),get_filenames)
# get individual column lengths
index <- sapply(filenames,length)
# need to pad columns with NAs such that dates are aligned...
# create sequence starting at minimum value in filenames
any_na <- function(x) any(is.na(x))
all_na <- function(x) all(is.na(x))
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC")
anyna <- sapply(filenames,any_na)
list_min <- function(x) min(unlist(x),na.rm=TRUE)
list_max <- function(x) max(unlist(x),na.rm=TRUE)
mins <- sapply(filenames,list_min)
mins <- sapply(mins,to_posix)
is.numeric.POSIXt(mins[1])
format(mins,"%m-%d-%H")
# create function to count # files for each site
rm(list = ls(all = TRUE))
library(ggplot2)
library(data.table)
mydir = "~/Documents/ALANizer"
get_filenames <- function(site) {
dir_name <- paste("site", formatC(site,width=2,format="d",flag="0"), sep = "")
mypath <- paste(mydir, dir_name, sep = "/")
all_files <- list.files(path = mypath,pattern = "*CSV")
all_files <- lapply(all_files,function(x) gsub("(.CSV)","",as.character(x)))
all_dates <- lapply(all_files,function(x) as.POSIXct(x,format="%m-%d-%H",tz="UTC"))
for.setattr <- function(all_dates)
for (i in seq_along(all_dates))
setattr(all_dates[[i]], name = "tzone", value = "Canada/Pacific")
for.setattr(all_dates)
return(all_dates)
}
get_filenames(2)
# want to run get_filenames on integers 1 thru 12
filenames <- lapply(data.frame(rbind(1:12)),get_filenames)
# get individual column lengths
index <- sapply(filenames,length)
# need to pad columns with NAs such that dates are aligned...
# create sequence starting at minimum value in filenames
any_na <- function(x) any(is.na(x))
all_na <- function(x) all(is.na(x))
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC")
anyna <- sapply(filenames,any_na)
list_min <- function(x) min(unlist(x),na.rm=TRUE)
list_max <- function(x) max(unlist(x),na.rm=TRUE)
mins <- sapply(filenames,list_min)
format(mins,"%m-%d-%H")
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC","%m-%d-%H")
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC","%m-%d-%H")
anyna <- sapply(filenames,any_na)
list_min <- function(x) min(unlist(x),na.rm=TRUE)
list_max <- function(x) max(unlist(x),na.rm=TRUE)
mins <- sapply(filenames,list_min)
mins <- sapply(mins,to_posix)
is.numeric.POSIXt(mins[1])
any_na <- function(x) any(is.na(x))
all_na <- function(x) all(is.na(x))
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC","%m-%d-%H")
anyna <- sapply(filenames,any_na)
list_min <- function(x) min(unlist(x),na.rm=TRUE)
list_max <- function(x) max(unlist(x),na.rm=TRUE)
is.numeric.POSIXt(filenames[1])
filenames[1]
filenames$X1[1]
is.numeric.POSIXt(filenames$X1[1])
is.POSIXct <- function(x) inherits(x, "POSIXct")
is.POSIXct(filenames$X1[1])
rm(list = ls(all = TRUE))
library(ggplot2)
library(data.table)
mydir = "~/Documents/ALANizer"
get_filenames <- function(site) {
dir_name <- paste("site", formatC(site,width=2,format="d",flag="0"), sep = "")
mypath <- paste(mydir, dir_name, sep = "/")
all_files <- list.files(path = mypath,pattern = "*CSV")
all_files <- lapply(all_files,function(x) gsub("(.CSV)","",as.character(x)))
all_dates <- lapply(all_files,function(x) as.POSIXct(x,format="%m-%d-%H",tz="UTC"))
for.setattr <- function(all_dates)
for (i in seq_along(all_dates))
setattr(all_dates[[i]], name = "tzone", value = "Canada/Pacific")
for.setattr(all_dates)
return(all_dates)
}
get_filenames(2)
# want to run get_filenames on integers 1 thru 12
filenames <- lapply(data.frame(rbind(1:12)),get_filenames)
is.POSIXct(filenames$X1[1])
is.POSIXct <- function(x) inherits(x, "POSIXct")
is.POSIXct <- function(x) inherits(x, "POSIXct")
is.POSIXct(filenames$X1[1])
rm(list = ls(all = TRUE))
library(ggplot2)
library(data.table)
mydir = "~/Documents/ALANizer"
#get_filenames <- function(site) {
site = 1
dir_name <- paste("site", formatC(site,width=2,format="d",flag="0"), sep = "")
mypath <- paste(mydir, dir_name, sep = "/")
all_files <- list.files(path = mypath,pattern = "*CSV")
all_files <- lapply(all_files,function(x) gsub("(.CSV)","",as.character(x)))
is.POSIXct <- function(x) inherits(x, "POSIXct")
all_files
all_files[1]
is.POSIXct(all_files[1])
all_dates <- lapply(all_files,function(x) as.POSIXct(x,format="%m-%d-%H",tz="UTC"))
is.POSIXct(all_dates[1])
is.POSIXct(all_dates[1])
all_dates[1]
is.POSIXct(as.POSIXct(all_dates[1],format="%m-%d-%H",tz="UTC"))
all_dates[[1]]
is.POSIXct(all_dates[[1]])
rm(list = ls(all = TRUE))
library(ggplot2)
library(data.table)
is.POSIXct <- function(x) inherits(x, "POSIXct")
mydir = "~/Documents/ALANizer"
get_filenames <- function(site) {
dir_name <- paste("site", formatC(site,width=2,format="d",flag="0"), sep = "")
mypath <- paste(mydir, dir_name, sep = "/")
all_files <- list.files(path = mypath,pattern = "*CSV")
all_files <- lapply(all_files,function(x) gsub("(.CSV)","",as.character(x)))
all_dates <- lapply(all_files,function(x) as.POSIXct(x,format="%m-%d-%H",tz="UTC"))
for.setattr <- function(all_dates)
for (i in seq_along(all_dates))
setattr(all_dates[[i]], name = "tzone", value = "Canada/Pacific")
for.setattr(all_dates)
return(all_dates)
}
get_filenames(2)
# want to run get_filenames on integers 1 thru 12
filenames <- lapply(data.frame(rbind(1:12)),get_filenames)
# get individual column lengths
index <- sapply(filenames,length)
any_na <- function(x) any(is.na(x))
all_na <- function(x) all(is.na(x))
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC","%m-%d-%H")
anyna <- sapply(filenames,any_na)
list_min <- function(x) min(unlist(x),na.rm=TRUE)
list_max <- function(x) max(unlist(x),na.rm=TRUE)
mins <- sapply(filenames,list_min)
mins <- sapply(mins,to_posix)
is.POSIXct(mins[[1]])
mins[[1]]
mins[[2]]
mins
rm(list = ls(all = TRUE))
library(ggplot2)
library(data.table)
is.POSIXct <- function(x) inherits(x, "POSIXct")
mydir = "~/Documents/ALANizer"
get_filenames <- function(site) {
dir_name <- paste("site", formatC(site,width=2,format="d",flag="0"), sep = "")
mypath <- paste(mydir, dir_name, sep = "/")
all_files <- list.files(path = mypath,pattern = "*CSV")
all_files <- lapply(all_files,function(x) gsub("(.CSV)","",as.character(x)))
all_dates <- lapply(all_files,function(x) as.POSIXct(x,format="%m-%d-%H",tz="UTC"))
for.setattr <- function(all_dates)
for (i in seq_along(all_dates))
setattr(all_dates[[i]], name = "tzone", value = "Canada/Pacific")
for.setattr(all_dates)
return(all_dates)
}
# want to run get_filenames on integers 1 thru 12
filenames <- lapply(data.frame(rbind(1:12)),get_filenames)
filenames[[1]]
# get individual column lengths
index <- sapply(filenames,length)
index
any_na <- function(x) any(is.na(x))
all_na <- function(x) all(is.na(x))
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC","%m-%d-%H")
anyna <- sapply(filenames,any_na)
list_min <- function(x) min(unlist(x),na.rm=TRUE)
list_max <- function(x) max(unlist(x),na.rm=TRUE)
mins <- sapply(filenames,list_min)
mins
mins <- sapply(mins,to_posix)
mins[1]
str(mins)
mins$X1
mins.X1
mins[1]
mins
mins <- sapply(filenames,list_min)
mins
is.POSIXct(mins[[1]])
mins[[1]]
mins[1]
to_posix(mins[[1]])
to_posix(1687370400)
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC")
to_posix(1687370400)
# issue with keeping columns as POSIXct
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC")
anyna <- sapply(filenames,any_na)
list_min <- function(x) min(unlist(x),na.rm=TRUE)
list_max <- function(x) max(unlist(x),na.rm=TRUE)
mins <- sapply(filenames,list_min)
is.POSIXct(mins[[1]])
mins <- sapply(mins,to_posix)
is.POSIXct(mins[[1]])
format(mins[[1]],"%m-%d-%H")
format(mins[[1]])
mins[[1]]
any_na <- function(x) any(is.na(x))
all_na <- function(x) all(is.na(x))
# issue with keeping columns as POSIXct
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC")
anyna <- sapply(filenames,any_na)
list_min <- function(x) min(unlist(x),na.rm=TRUE)
list_max <- function(x) max(unlist(x),na.rm=TRUE)
mins <- lapply(filenames,list_min)
is.POSIXct(mins[[1]])
mins <- lapply(mins,to_posix)
is.POSIXct(mins[[1]])
maxes <- lapply(maxes,to_posix)
maxes <- lapply(filenames,list_max)
maxes <- lapply(maxes,to_posix)
colinfo <- as.data.frame(index,anyna,mins,maxes)
true_min <- min(mins)
rm(list = ls(all = TRUE))
library(ggplot2)
library(data.table)
is.POSIXct <- function(x) inherits(x, "POSIXct")
mydir = "~/Documents/ALANizer"
get_filenames <- function(site) {
dir_name <- paste("site", formatC(site,width=2,format="d",flag="0"), sep = "")
mypath <- paste(mydir, dir_name, sep = "/")
all_files <- list.files(path = mypath,pattern = "*CSV")
all_files <- lapply(all_files,function(x) gsub("(.CSV)","",as.character(x)))
all_dates <- lapply(all_files,function(x) as.POSIXct(x,format="%m-%d-%H",tz="UTC"))
for.setattr <- function(all_dates)
for (i in seq_along(all_dates))
setattr(all_dates[[i]], name = "tzone", value = "Canada/Pacific")
for.setattr(all_dates)
return(all_dates)
}
# want to run get_filenames on integers 1 thru 12
filenames <- lapply(data.frame(rbind(1:12)),get_filenames)
# get individual column lengths
index <- sapply(filenames,length)
# need to pad columns with NAs such that dates are aligned...
# create sequence starting at minimum value in filenames
any_na <- function(x) any(is.na(x))
all_na <- function(x) all(is.na(x))
# issue with keeping columns as POSIXct
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC")
anyna <- sapply(filenames,any_na)
list_min <- function(x) min(unlist(x),na.rm=TRUE)
list_max <- function(x) max(unlist(x),na.rm=TRUE)
mins <- lapply(filenames,list_min)
mins <- lapply(mins,to_posix)
maxes <- lapply(filenames,list_max)
maxes <- lapply(maxes,to_posix)
colinfo <- as.data.frame(index,anyna,mins,maxes)
index
anyna
mins
mins <- lapply(filenames,list_min)
is.list(mins)
lapply(mins,to_posix)
lapply(unlist(mins),to_posix)
sapply(mins,to_posix)
unlist(lapply(mins,to_posix))
mins <- lapply(filenames,list_min)
unlist(lapply(mins,to_posix))
mins <- lapply(filenames,list_min)
is.POSIXct(mins[[1]])
mins <- lapply(mins,to_posix)
is.POSIXct(mins[[1]])
is.POSIXct(unlist(mins[[1]]))
mins <- lapply(filenames,list_min)
mins <- unlist(lapply(mins,to_posix))
mins
is.POSIXct(mins[[1]])
mins <- lapply(filenames,list_min)
is.POSIXct(mins[[1]])
mins <- lapply(mins,to_posix)
is.POSIXct(mins[[1]])
mins <- unlist(mins)
is.POSIXct(mins[[1]])
mins <- lapply(filenames,list_min)
is.POSIXct(mins[[1]])
mins <- lapply(mins,to_posix)
is.POSIXct(mins[[1]])
mins <- unlist(mins)
is.POSIXct(mins[[1]])
mins <- lapply(filenames,list_min)
is.POSIXct(mins[[1]])
mins <- lapply(mins,to_posix)
is.POSIXct(mins[[1]])
do.call("c",mins)
mins <- lapply(filenames,list_min)
is.POSIXct(mins[[1]])
mins <- lapply(mins,to_posix)
is.POSIXct(mins[[1]])
mins <- do.call("c",mins)
is.POSIXct(mins[[1]])
mins <- lapply(filenames,list_min)
is.POSIXct(mins[[1]])
mins <- do.call("c",lapply(mins,to_posix))
is.POSIXct(mins[[1]])
maxes <- lapply(filenames,list_max)
maxes <- do.call("c",lapply(maxes,to_posix))
colinfo <- as.data.frame(index,anyna,mins,maxes)
index
anyna
mins
maxes
grep("!",filenames,value=TRUE)
grep("!",filenames$X1,value=TRUE)
lapply(filenames,function(x) grep("!",x,value=TRUE))
# create function to count # files for each site
rm(list = ls(all = TRUE))
library(ggplot2)
library(data.table)
is.POSIXct <- function(x) inherits(x, "POSIXct")
mydir = "~/Documents/ALANizer"
get_filenames <- function(site) {
dir_name <- paste("site", formatC(site,width=2,format="d",flag="0"), sep = "")
mypath <- paste(mydir, dir_name, sep = "/")
all_files <- list.files(path = mypath,pattern = "*CSV")
all_files <- lapply(all_files,function(x) gsub("(.CSV)","",as.character(x)))
all_dates <- lapply(all_files,function(x) as.POSIXct(x,format="%m-%d-%H",tz="UTC"))
for.setattr <- function(all_dates)
for (i in seq_along(all_dates))
setattr(all_dates[[i]], name = "tzone", value = "Canada/Pacific")
for.setattr(all_dates)
return(all_dates)
}
# want to run get_filenames on integers 1 thru 12
filenames <- lapply(data.frame(rbind(1:12)),get_filenames)
# get individual column lengths
index <- sapply(filenames,length)
# need to pad columns with NAs such that dates are aligned...
# create sequence starting at minimum value in filenames
any_na <- function(x) any(is.na(x))
all_na <- function(x) all(is.na(x))
# issue with keeping columns as POSIXct
to_posix <- function(x) as.POSIXct(x,tz="PDT",origin="1970-01-01 00:00.00 UTC")
anyna <- sapply(filenames,any_na)
list_min <- function(x) min(unlist(x),na.rm=TRUE)
list_max <- function(x) max(unlist(x),na.rm=TRUE)
mins <- lapply(filenames,list_min)
mins <- do.call("c",lapply(mins,to_posix)) # do.call("c" etc.) unlists without removing POSIXct class
maxes <- lapply(filenames,list_max)
maxes <- do.call("c",lapply(maxes,to_posix))
as.data.frame(index,anyna)
as.data.frame(index)
as.data.frame(anyna)
cbind.data.frame(index)
cbind.data.frame(anyna)
cbind.data.frame(index,anyna)
cbind.data.frame(index,anyna,mins,maxes)
colinfo <- cbind.data.frame(index,anyna,mins,maxes)
?subset
ggplot(biomass, aes(Treatment, Near)) +
geom_boxplot(outlier.shape = NA) +
labs(y = "Biomass statistic") +
geom_jitter() +
geom_hline(aes(yintercept = 0.5),colour="red",linetype="dotted")
library(ggplot2)
library(data.table)
biomass <- fread("../raw_data/Pitfall_Trap_Biomass_Data.csv")
setwd("Documents/alan-setup/prog/refactored/scripts")
library(ggplot2)
library(data.table)
biomass <- fread("../raw_data/Pitfall_Trap_Biomass_Data.csv")
biomass$StartDate <- as.Date(biomass$StartDate, origin = "1970-01-01")
metatable <- fread("../cleaned_data/metadata.csv")
metatable <- metatable[!is.na(Site)]
biomass <- dcast(biomass, StartDate+Site~Distance, value.var=c("Biomass"))
setnames(biomass, c("0m","5m"), c("Near","Far"))
biomass[metatable, Treatment := i.Treatment, on=.(Site, StartDate)]
biomass[, Index := Near/(Near+Far), by = .(StartDate,Site)]
biomass <- biomass[Treatment %in% c("A","C","W")]
biomass$Treatment <- factor(biomass$Treatment, levels=c("C","W","A"), ordered = TRUE)
ggplot(biomass, aes(Treatment, Near)) +
geom_boxplot(outlier.shape = NA) +
labs(y = "Biomass statistic") +
geom_jitter() +
geom_hline(aes(yintercept = 0.5),colour="red",linetype="dotted")
wilcoxon_biomass_one <- data.frame(W = wilcox.test(biomass[Treatment == ("W"),Index], biomass[Treatment == ("C"),Index],
alternative = "two.sided", exact = FALSE)$p.value,
A = wilcox.test(biomass[Treatment == ("A"),Index], biomass[Treatment == ("C"),Index],
alternative = "two.sided", exact = FALSE)$p.value)
wilcoxon_biomass_one
wilcoxon_biomass_one <- data.frame(W = wilcox.test(biomass[Treatment == ("W"),Near], biomass[Treatment == ("C"),Near],
alternative = "two.sided", exact = FALSE)$p.value,
A = wilcox.test(biomass[Treatment == ("A"),Near], biomass[Treatment == ("C"),Near],
alternative = "two.sided", exact = FALSE)$p.value)
wilcoxon_biomass_one
ggplot(counts, aes(Treatment, Near)) +
geom_boxplot() +
geom_boxplot(outlier.shape = NA) +
labs(y = "Count statistic") +
geom_jitter() +
geom_hline(aes(yintercept = 0.5),colour="red",linetype="dotted")
wilcoxon_count <- data.frame(W = wilcox.test(counts[Treatment == ("W"),Near], counts[Treatment == ("C"),Near],
alternative = "two.sided", exact = FALSE)$p.value,
A = wilcox.test(counts[Treatment == ("A"),Near], counts[Treatment == ("C"),Near],
alternative = "two.sided", exact = FALSE)$p.value)
library(ggplot2)
library(data.table)
library(igraph)
pitfall_names <- fread("../raw_data/pitfall_classification_filenames.txt", header = FALSE)
setnames(pitfall_names, "V1", "FullName")
#2023-08-05_1_A_5m002_0040_5763_8740_0004.png
#StartDate_Site_Treatment_Distance
pitfall_names <- pitfall_names[grep("debris", FullName, invert = TRUE)]
pitfall_names <- pitfall_names[grep("multiple_insects", FullName, invert = TRUE)]
pitfall_names$FullName <- gsub(" ", "_", pitfall_names$FullName)
pitfall_names[, c("Root","Filename") := tstrsplit(FullName, "\\/+(?!\\S*\\/)", perl = TRUE)]
pitfall_names[, c("Root","Phylum","Class","Order","Family","Subfamily","Genus","Species") := tstrsplit(Root, "/")]
pitfall_names[, c("StartDate", "Site", "PrescribedTreatment", "Distance") := tstrsplit(Filename, "_", fixed = TRUE, type.convert = TRUE)[1:4]]
pitfall_names[, Distance := strtrim(Distance, 2)]
pitfall_names[, StartDate := as.Date(StartDate)]
pitfall_names[, id := .I]
metatable <- fread("../cleaned_data/metadata.csv")
metatable <- metatable[!is.na(Site)]
raw_counts <- pitfall_names[, .(N = .N,
N_Isopoda = .SD[Class == "Malacostraca",.N]), by=.(Site,StartDate,Distance)]
raw_counts
counts <- dcast(raw_counts, StartDate+Site~Distance, value.var=c("N"))
setnames(counts, c("0m","5m"), c("Near","Far"))
counts[metatable, Treatment := i.Treatment, on=.(Site, StartDate)]
counts[, Index := Near/(Near+Far), by = .(StartDate,Site)]
counts <- counts[Treatment %in% c("C","A","W")]
counts$Treatment <- factor(counts$Treatment, levels=c("C","W","A"), ordered = TRUE)
ggplot(counts, aes(Treatment, Near)) +
geom_boxplot() +
geom_boxplot(outlier.shape = NA) +
labs(y = "Count statistic") +
geom_jitter() +
geom_hline(aes(yintercept = 0.5),colour="red",linetype="dotted")
wilcoxon_count <- data.frame(W = wilcox.test(counts[Treatment == ("W"),Near], counts[Treatment == ("C"),Near],
alternative = "two.sided", exact = FALSE)$p.value,
A = wilcox.test(counts[Treatment == ("A"),Near], counts[Treatment == ("C"),Near],
alternative = "two.sided", exact = FALSE)$p.value)
wilcoxon_count
